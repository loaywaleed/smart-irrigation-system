
smart-irrigation-system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  000007b6  0000084a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080016e  0080016e  000008b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019c0  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c48  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dbb  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00003e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000867  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af5  00000000  00000000  000048af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000053a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	ae 01       	movw	r20, r28
  6a:	b7 01       	movw	r22, r14
  6c:	c3 01       	movw	r24, r6
  6e:	cf 01       	movw	r24, r30
  70:	db 01       	movw	r26, r22
  72:	e7 01       	movw	r28, r14
  74:	f3 01       	movw	r30, r6

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e6 eb       	ldi	r30, 0xB6	; 182
  8a:	f7 e0       	ldi	r31, 0x07	; 7
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	ae 36       	cpi	r26, 0x6E	; 110
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	ae e6       	ldi	r26, 0x6E	; 110
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	af 36       	cpi	r26, 0x6F	; 111
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  ac:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <LED_Initialize>:
 *  Author: Loay
 */ 
#include "ecu_led.h"

STD_ReturnType LED_Initialize(const led_config_t *led_config)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	1f 92       	push	r1
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	fc 01       	movw	r30, r24
	STD_ReturnType ret = E_OK;
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
  c0:	30 81       	ld	r19, Z
  c2:	23 2f       	mov	r18, r19
  c4:	23 70       	andi	r18, 0x03	; 3
  c6:	99 81       	ldd	r25, Y+1	; 0x01
  c8:	9c 7f       	andi	r25, 0xFC	; 252
  ca:	92 2b       	or	r25, r18
  cc:	23 2f       	mov	r18, r19
  ce:	26 95       	lsr	r18
  d0:	26 95       	lsr	r18
  d2:	26 95       	lsr	r18
  d4:	27 70       	andi	r18, 0x07	; 7
  d6:	22 0f       	add	r18, r18
  d8:	22 0f       	add	r18, r18
  da:	93 7e       	andi	r25, 0xE3	; 227
							 .logic = led_config->led_status };
  dc:	36 fb       	bst	r19, 6
  de:	33 27       	eor	r19, r19
  e0:	30 f9       	bld	r19, 0
#include "ecu_led.h"

STD_ReturnType LED_Initialize(const led_config_t *led_config)
{
	STD_ReturnType ret = E_OK;
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
  e2:	92 2b       	or	r25, r18
  e4:	30 fb       	bst	r19, 0
  e6:	95 f9       	bld	r25, 5
  e8:	9f 73       	andi	r25, 0x3F	; 63
  ea:	99 83       	std	Y+1, r25	; 0x01
							 .logic = led_config->led_status };

	if (led_config == NULL)
  ec:	ef 2b       	or	r30, r31
  ee:	31 f0       	breq	.+12     	; 0xfc <LED_Initialize+0x48>
	{
		ret = E_NOT_OK;
	}
	else
	{
		GPIO_InitPin(&pin_obj);
  f0:	ce 01       	movw	r24, r28
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	0e 94 b5 02 	call	0x56a	; 0x56a <GPIO_InitPin>
 */ 
#include "ecu_led.h"

STD_ReturnType LED_Initialize(const led_config_t *led_config)
{
	STD_ReturnType ret = E_OK;
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	01 c0       	rjmp	.+2      	; 0xfe <LED_Initialize+0x4a>
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
							 .logic = led_config->led_status };

	if (led_config == NULL)
	{
		ret = E_NOT_OK;
  fc:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		GPIO_InitPin(&pin_obj);
	}
	return (ret);
}
  fe:	0f 90       	pop	r0
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <LED_TurnOn>:

STD_ReturnType LED_TurnOn(const led_config_t *led_config)
{
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	1f 92       	push	r1
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	fc 01       	movw	r30, r24
	STD_ReturnType ret = E_OK;
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
 112:	30 81       	ld	r19, Z
 114:	23 2f       	mov	r18, r19
 116:	23 70       	andi	r18, 0x03	; 3
 118:	99 81       	ldd	r25, Y+1	; 0x01
 11a:	9c 7f       	andi	r25, 0xFC	; 252
 11c:	92 2b       	or	r25, r18
 11e:	23 2f       	mov	r18, r19
 120:	26 95       	lsr	r18
 122:	26 95       	lsr	r18
 124:	26 95       	lsr	r18
 126:	27 70       	andi	r18, 0x07	; 7
 128:	22 0f       	add	r18, r18
 12a:	22 0f       	add	r18, r18
 12c:	93 7e       	andi	r25, 0xE3	; 227
	.logic = led_config->led_status };
 12e:	36 fb       	bst	r19, 6
 130:	33 27       	eor	r19, r19
 132:	30 f9       	bld	r19, 0
}

STD_ReturnType LED_TurnOn(const led_config_t *led_config)
{
	STD_ReturnType ret = E_OK;
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
 134:	92 2b       	or	r25, r18
 136:	30 fb       	bst	r19, 0
 138:	95 f9       	bld	r25, 5
 13a:	9f 73       	andi	r25, 0x3F	; 63
 13c:	99 83       	std	Y+1, r25	; 0x01
	.logic = led_config->led_status };

	if (led_config == NULL)
 13e:	ef 2b       	or	r30, r31
 140:	39 f0       	breq	.+14     	; 0x150 <LED_TurnOn+0x4a>
	{
		ret = E_NOT_OK;
	}
	else
	{
		GPIO_WritePinValue(&pin_obj, HIGH);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	ce 01       	movw	r24, r28
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	0e 94 76 02 	call	0x4ec	; 0x4ec <GPIO_WritePinValue>
	return (ret);
}

STD_ReturnType LED_TurnOn(const led_config_t *led_config)
{
	STD_ReturnType ret = E_OK;
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	01 c0       	rjmp	.+2      	; 0x152 <LED_TurnOn+0x4c>
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
	.logic = led_config->led_status };

	if (led_config == NULL)
	{
		ret = E_NOT_OK;
 150:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		GPIO_WritePinValue(&pin_obj, HIGH);
	}
	return (ret);	
}
 152:	0f 90       	pop	r0
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <LED_TurnOff>:

STD_ReturnType LED_TurnOff(const led_config_t *led_config)
{
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	1f 92       	push	r1
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	fc 01       	movw	r30, r24
	STD_ReturnType ret = E_OK;
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
 166:	30 81       	ld	r19, Z
 168:	23 2f       	mov	r18, r19
 16a:	23 70       	andi	r18, 0x03	; 3
 16c:	99 81       	ldd	r25, Y+1	; 0x01
 16e:	9c 7f       	andi	r25, 0xFC	; 252
 170:	92 2b       	or	r25, r18
 172:	23 2f       	mov	r18, r19
 174:	26 95       	lsr	r18
 176:	26 95       	lsr	r18
 178:	26 95       	lsr	r18
 17a:	27 70       	andi	r18, 0x07	; 7
 17c:	22 0f       	add	r18, r18
 17e:	22 0f       	add	r18, r18
 180:	93 7e       	andi	r25, 0xE3	; 227
	.logic = led_config->led_status };
 182:	36 fb       	bst	r19, 6
 184:	33 27       	eor	r19, r19
 186:	30 f9       	bld	r19, 0
}

STD_ReturnType LED_TurnOff(const led_config_t *led_config)
{
	STD_ReturnType ret = E_OK;
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
 188:	92 2b       	or	r25, r18
 18a:	30 fb       	bst	r19, 0
 18c:	95 f9       	bld	r25, 5
 18e:	9f 73       	andi	r25, 0x3F	; 63
 190:	99 83       	std	Y+1, r25	; 0x01
	.logic = led_config->led_status };
	if (led_config == NULL)
 192:	ef 2b       	or	r30, r31
 194:	39 f0       	breq	.+14     	; 0x1a4 <LED_TurnOff+0x4a>
	{
		ret = E_NOT_OK;
	}
	else
	{
		GPIO_WritePinValue(&pin_obj, LOW);
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	ce 01       	movw	r24, r28
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	0e 94 76 02 	call	0x4ec	; 0x4ec <GPIO_WritePinValue>
	return (ret);	
}

STD_ReturnType LED_TurnOff(const led_config_t *led_config)
{
	STD_ReturnType ret = E_OK;
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <LED_TurnOff+0x4c>
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
	.logic = led_config->led_status };
	if (led_config == NULL)
	{
		ret = E_NOT_OK;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		GPIO_WritePinValue(&pin_obj, LOW);
	}
	return (ret);		
}
 1a6:	0f 90       	pop	r0
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <APP_Init>:
};

/* Initialization */
void APP_Init(void)
{
	GPIO_InitPin(&pump);
 1ae:	8e e6       	ldi	r24, 0x6E	; 110
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 b5 02 	call	0x56a	; 0x56a <GPIO_InitPin>
	GPIO_InitPin(&level_switch);
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 b5 02 	call	0x56a	; 0x56a <GPIO_InitPin>
	GPIO_InitPin(&moisture_sensor);
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 b5 02 	call	0x56a	; 0x56a <GPIO_InitPin>
	/* Turn on moisture sensor */
	GPIO_InitPin(&sensor_power);
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 b5 02 	call	0x56a	; 0x56a <GPIO_InitPin>
	ADC_Init(DIV_8, AVCC_INDEX);
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ADC_Init>
	LED_Initialize(&dry_indicator);
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 5a 00 	call	0xb4	; 0xb4 <LED_Initialize>
	UART_Init();
 1de:	0e 94 46 03 	call	0x68c	; 0x68c <UART_Init>
 1e2:	08 95       	ret

000001e4 <main>:
}

/* Entry point */
int main(void)
{
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	00 d0       	rcall	.+0      	; 0x1ea <main+0x6>
 1ea:	1f 92       	push	r1
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
	logic_t tank_value;
	STD_ReturnType ret;
	u16 moisture_reading;
	
	APP_Init();
 1f0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <APP_Init>
    while (1) 
    {
		ret = GPIO_ReadPinValue(&level_switch, &tank_value);
 1f4:	be 01       	movw	r22, r28
 1f6:	6f 5f       	subi	r22, 0xFF	; 255
 1f8:	7f 4f       	sbci	r23, 0xFF	; 255
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 22 03 	call	0x644	; 0x644 <GPIO_ReadPinValue>
		//tank_value = 0;
		/* Reading moisture sensor value */
		ret = ADC_ReadChannel(ADC4_INDEX, &moisture_reading);
 202:	be 01       	movw	r22, r28
 204:	6e 5f       	subi	r22, 0xFE	; 254
 206:	7f 4f       	sbci	r23, 0xFF	; 255
 208:	84 e0       	ldi	r24, 0x04	; 4
 20a:	0e 94 01 02 	call	0x402	; 0x402 <ADC_ReadChannel>
		ret = UART_PrintString("Soil Moisture Reading is: \n");
 20e:	86 e1       	ldi	r24, 0x16	; 22
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <UART_PrintString>
		ret = UART_PrintNumber(moisture_reading);
 216:	8a 81       	ldd	r24, Y+2	; 0x02
 218:	9b 81       	ldd	r25, Y+3	; 0x03
 21a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <UART_PrintNumber>
		ret = UART_TransmitByte('\n');
 21e:	8a e0       	ldi	r24, 0x0A	; 10
 220:	0e 94 62 03 	call	0x6c4	; 0x6c4 <UART_TransmitByte>
		
		if (tank_value == 0)
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	81 11       	cpse	r24, r1
 228:	47 c0       	rjmp	.+142    	; 0x2b8 <main+0xd4>
		{
			if (moisture_reading > 435 && moisture_reading < 560)
 22a:	8a 81       	ldd	r24, Y+2	; 0x02
 22c:	9b 81       	ldd	r25, Y+3	; 0x03
 22e:	9c 01       	movw	r18, r24
 230:	24 5b       	subi	r18, 0xB4	; 180
 232:	31 40       	sbci	r19, 0x01	; 1
 234:	2c 37       	cpi	r18, 0x7C	; 124
 236:	31 05       	cpc	r19, r1
 238:	70 f4       	brcc	.+28     	; 0x256 <main+0x72>
			{
				ret = UART_PrintString("Soil is dry\n");
 23a:	82 e3       	ldi	r24, 0x32	; 50
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <UART_PrintString>
				ret = GPIO_WritePinValue(&pump, HIGH);
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	8e e6       	ldi	r24, 0x6E	; 110
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	0e 94 76 02 	call	0x4ec	; 0x4ec <GPIO_WritePinValue>
				ret = LED_TurnOn(&dry_indicator);
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 83 00 	call	0x106	; 0x106 <LED_TurnOn>
 254:	43 c0       	rjmp	.+134    	; 0x2dc <main+0xf8>
			}
			else if (moisture_reading > 315 && moisture_reading <= 435)
 256:	9c 01       	movw	r18, r24
 258:	2c 53       	subi	r18, 0x3C	; 60
 25a:	31 40       	sbci	r19, 0x01	; 1
 25c:	28 37       	cpi	r18, 0x78	; 120
 25e:	31 05       	cpc	r19, r1
 260:	70 f4       	brcc	.+28     	; 0x27e <main+0x9a>
			{
				ret = GPIO_WritePinValue(&pump, LOW);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	8e e6       	ldi	r24, 0x6E	; 110
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 76 02 	call	0x4ec	; 0x4ec <GPIO_WritePinValue>
				ret = UART_PrintString("Soil is wet\n");
 26c:	8f e3       	ldi	r24, 0x3F	; 63
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <UART_PrintString>
				ret = LED_TurnOff(&dry_indicator);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_TurnOff>
 27c:	2f c0       	rjmp	.+94     	; 0x2dc <main+0xf8>
			}
			else if (moisture_reading >= 195 && moisture_reading <= 315)
 27e:	83 5c       	subi	r24, 0xC3	; 195
 280:	91 09       	sbc	r25, r1
 282:	89 37       	cpi	r24, 0x79	; 121
 284:	91 05       	cpc	r25, r1
 286:	70 f4       	brcc	.+28     	; 0x2a4 <main+0xc0>
			{
				ret = GPIO_WritePinValue(&pump, LOW);
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	8e e6       	ldi	r24, 0x6E	; 110
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 76 02 	call	0x4ec	; 0x4ec <GPIO_WritePinValue>
				ret = UART_PrintString("Soil is very wet\n");
 292:	8c e4       	ldi	r24, 0x4C	; 76
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <UART_PrintString>
				ret = LED_TurnOff(&dry_indicator);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_TurnOff>
 2a2:	1c c0       	rjmp	.+56     	; 0x2dc <main+0xf8>
			}
			else 
			{
				ret = LED_TurnOff(&dry_indicator);
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_TurnOff>
				ret = GPIO_WritePinValue(&pump, LOW);
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	8e e6       	ldi	r24, 0x6E	; 110
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 76 02 	call	0x4ec	; 0x4ec <GPIO_WritePinValue>
 2b6:	12 c0       	rjmp	.+36     	; 0x2dc <main+0xf8>
			}
		}
		else 
		{
			ret = GPIO_WritePinValue(&sensor_power, LOW);
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	0e 94 76 02 	call	0x4ec	; 0x4ec <GPIO_WritePinValue>
			ret = GPIO_WritePinValue(&pump, LOW);
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	8e e6       	ldi	r24, 0x6E	; 110
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 76 02 	call	0x4ec	; 0x4ec <GPIO_WritePinValue>
			ret = UART_PrintString("Tank is empty\n");
 2cc:	8e e5       	ldi	r24, 0x5E	; 94
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <UART_PrintString>
			ret = LED_TurnOn(&dry_indicator);
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 83 00 	call	0x106	; 0x106 <LED_TurnOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2dc:	2f e3       	ldi	r18, 0x3F	; 63
 2de:	82 e4       	ldi	r24, 0x42	; 66
 2e0:	9f e0       	ldi	r25, 0x0F	; 15
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0xfe>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0x108>
 2ec:	00 00       	nop
 2ee:	82 cf       	rjmp	.-252    	; 0x1f4 <main+0x10>

000002f0 <ADC_Init>:
 */ 

#include "hal_adc.h"

STD_ReturnType ADC_Init(adc_prescaler_t clock, voltage_ref_t v_ref)
{
 2f0:	e8 2f       	mov	r30, r24
	STD_ReturnType ret = E_OK;
	
	//Enable ADC
	SET_BIT(ADCSRA, ADEN);
 2f2:	aa e7       	ldi	r26, 0x7A	; 122
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	8c 91       	ld	r24, X
 2f8:	80 68       	ori	r24, 0x80	; 128
 2fa:	8c 93       	st	X, r24
	
	switch (v_ref) {
 2fc:	61 30       	cpi	r22, 0x01	; 1
 2fe:	71 f0       	breq	.+28     	; 0x31c <ADC_Init+0x2c>
 300:	18 f0       	brcs	.+6      	; 0x308 <ADC_Init+0x18>
 302:	62 30       	cpi	r22, 0x02	; 2
 304:	a9 f0       	breq	.+42     	; 0x330 <ADC_Init+0x40>
 306:	1e c0       	rjmp	.+60     	; 0x344 <ADC_Init+0x54>
	case AREF_INDEX:
		CLEAR_BIT(ADMUX, REFS0);
 308:	ac e7       	ldi	r26, 0x7C	; 124
 30a:	b0 e0       	ldi	r27, 0x00	; 0
 30c:	8c 91       	ld	r24, X
 30e:	8f 7b       	andi	r24, 0xBF	; 191
 310:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX, REFS1);
 312:	8c 91       	ld	r24, X
 314:	8f 77       	andi	r24, 0x7F	; 127
 316:	8c 93       	st	X, r24

#include "hal_adc.h"

STD_ReturnType ADC_Init(adc_prescaler_t clock, voltage_ref_t v_ref)
{
	STD_ReturnType ret = E_OK;
 318:	80 e0       	ldi	r24, 0x00	; 0
	
	switch (v_ref) {
	case AREF_INDEX:
		CLEAR_BIT(ADMUX, REFS0);
		CLEAR_BIT(ADMUX, REFS1);
		break;
 31a:	15 c0       	rjmp	.+42     	; 0x346 <ADC_Init+0x56>
	case AVCC_INDEX:
		SET_BIT(ADMUX, REFS0);
 31c:	ac e7       	ldi	r26, 0x7C	; 124
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	8c 91       	ld	r24, X
 322:	80 64       	ori	r24, 0x40	; 64
 324:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX, REFS1);
 326:	8c 91       	ld	r24, X
 328:	8f 77       	andi	r24, 0x7F	; 127
 32a:	8c 93       	st	X, r24

#include "hal_adc.h"

STD_ReturnType ADC_Init(adc_prescaler_t clock, voltage_ref_t v_ref)
{
	STD_ReturnType ret = E_OK;
 32c:	80 e0       	ldi	r24, 0x00	; 0
		CLEAR_BIT(ADMUX, REFS1);
		break;
	case AVCC_INDEX:
		SET_BIT(ADMUX, REFS0);
		CLEAR_BIT(ADMUX, REFS1);
		break;
 32e:	0b c0       	rjmp	.+22     	; 0x346 <ADC_Init+0x56>
	case INTERNAL_INDEX:
		SET_BIT(ADMUX, REFS0);
 330:	ac e7       	ldi	r26, 0x7C	; 124
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	8c 91       	ld	r24, X
 336:	80 64       	ori	r24, 0x40	; 64
 338:	8c 93       	st	X, r24
		SET_BIT(ADMUX, REFS1);
 33a:	8c 91       	ld	r24, X
 33c:	80 68       	ori	r24, 0x80	; 128
 33e:	8c 93       	st	X, r24

#include "hal_adc.h"

STD_ReturnType ADC_Init(adc_prescaler_t clock, voltage_ref_t v_ref)
{
	STD_ReturnType ret = E_OK;
 340:	80 e0       	ldi	r24, 0x00	; 0
		CLEAR_BIT(ADMUX, REFS1);
		break;
	case INTERNAL_INDEX:
		SET_BIT(ADMUX, REFS0);
		SET_BIT(ADMUX, REFS1);
		break;
 342:	01 c0       	rjmp	.+2      	; 0x346 <ADC_Init+0x56>
	default:
		ret = E_NOT_OK;
 344:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (clock) {
 346:	4e 2f       	mov	r20, r30
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	47 30       	cpi	r20, 0x07	; 7
 34c:	51 05       	cpc	r21, r1
 34e:	08 f0       	brcs	.+2      	; 0x352 <ADC_Init+0x62>
 350:	56 c0       	rjmp	.+172    	; 0x3fe <ADC_Init+0x10e>
 352:	fa 01       	movw	r30, r20
 354:	ec 5c       	subi	r30, 0xCC	; 204
 356:	ff 4f       	sbci	r31, 0xFF	; 255
 358:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__tablejump2__>
	case DIV_2:
		CLEAR_BIT(ADCSRA, ADPS2);
 35c:	ea e7       	ldi	r30, 0x7A	; 122
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	90 81       	ld	r25, Z
 362:	9b 7f       	andi	r25, 0xFB	; 251
 364:	90 83       	st	Z, r25
		CLEAR_BIT(ADCSRA, ADPS1);
 366:	90 81       	ld	r25, Z
 368:	9d 7f       	andi	r25, 0xFD	; 253
 36a:	90 83       	st	Z, r25
	break;
 36c:	08 95       	ret
	case DIV_4:
		CLEAR_BIT(ADCSRA, ADPS2);
 36e:	ea e7       	ldi	r30, 0x7A	; 122
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	90 81       	ld	r25, Z
 374:	9b 7f       	andi	r25, 0xFB	; 251
 376:	90 83       	st	Z, r25
		SET_BIT(ADCSRA, ADPS1);
 378:	90 81       	ld	r25, Z
 37a:	92 60       	ori	r25, 0x02	; 2
 37c:	90 83       	st	Z, r25
		CLEAR_BIT(ADCSRA, ADPS0);
 37e:	90 81       	ld	r25, Z
 380:	9e 7f       	andi	r25, 0xFE	; 254
 382:	90 83       	st	Z, r25
		break;
 384:	08 95       	ret
	case DIV_8:
		CLEAR_BIT(ADCSRA, ADPS2);
 386:	ea e7       	ldi	r30, 0x7A	; 122
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	90 81       	ld	r25, Z
 38c:	9b 7f       	andi	r25, 0xFB	; 251
 38e:	90 83       	st	Z, r25
		SET_BIT(ADCSRA, ADPS1);
 390:	90 81       	ld	r25, Z
 392:	92 60       	ori	r25, 0x02	; 2
 394:	90 83       	st	Z, r25
		SET_BIT(ADCSRA, ADPS0);
 396:	90 81       	ld	r25, Z
 398:	91 60       	ori	r25, 0x01	; 1
 39a:	90 83       	st	Z, r25
		break;
 39c:	08 95       	ret
	case DIV_16:
		SET_BIT(ADCSRA, ADPS2);
 39e:	ea e7       	ldi	r30, 0x7A	; 122
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	90 81       	ld	r25, Z
 3a4:	94 60       	ori	r25, 0x04	; 4
 3a6:	90 83       	st	Z, r25
		CLEAR_BIT(ADCSRA, ADPS1);
 3a8:	90 81       	ld	r25, Z
 3aa:	9d 7f       	andi	r25, 0xFD	; 253
 3ac:	90 83       	st	Z, r25
		CLEAR_BIT(ADCSRA, ADPS0);
 3ae:	90 81       	ld	r25, Z
 3b0:	9e 7f       	andi	r25, 0xFE	; 254
 3b2:	90 83       	st	Z, r25
		break;
 3b4:	08 95       	ret
	case DIV_32:
		SET_BIT(ADCSRA, ADPS2);
 3b6:	ea e7       	ldi	r30, 0x7A	; 122
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	90 81       	ld	r25, Z
 3bc:	94 60       	ori	r25, 0x04	; 4
 3be:	90 83       	st	Z, r25
		CLEAR_BIT(ADCSRA, ADPS1);
 3c0:	90 81       	ld	r25, Z
 3c2:	9d 7f       	andi	r25, 0xFD	; 253
 3c4:	90 83       	st	Z, r25
		SET_BIT(ADCSRA, ADPS0);
 3c6:	90 81       	ld	r25, Z
 3c8:	91 60       	ori	r25, 0x01	; 1
 3ca:	90 83       	st	Z, r25
		break;
 3cc:	08 95       	ret
	case DIV_64:
		SET_BIT(ADCSRA, ADPS2);
 3ce:	ea e7       	ldi	r30, 0x7A	; 122
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	90 81       	ld	r25, Z
 3d4:	94 60       	ori	r25, 0x04	; 4
 3d6:	90 83       	st	Z, r25
		SET_BIT(ADCSRA, ADPS1);
 3d8:	90 81       	ld	r25, Z
 3da:	92 60       	ori	r25, 0x02	; 2
 3dc:	90 83       	st	Z, r25
		CLEAR_BIT(ADCSRA, ADPS0);
 3de:	90 81       	ld	r25, Z
 3e0:	9e 7f       	andi	r25, 0xFE	; 254
 3e2:	90 83       	st	Z, r25
		break;
 3e4:	08 95       	ret
	case DIV_128:
		SET_BIT(ADCSRA, ADPS2);
 3e6:	ea e7       	ldi	r30, 0x7A	; 122
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	90 81       	ld	r25, Z
 3ec:	94 60       	ori	r25, 0x04	; 4
 3ee:	90 83       	st	Z, r25
		SET_BIT(ADCSRA, ADPS1);
 3f0:	90 81       	ld	r25, Z
 3f2:	92 60       	ori	r25, 0x02	; 2
 3f4:	90 83       	st	Z, r25
		SET_BIT(ADCSRA, ADPS0);
 3f6:	90 81       	ld	r25, Z
 3f8:	91 60       	ori	r25, 0x01	; 1
 3fa:	90 83       	st	Z, r25
		break;
 3fc:	08 95       	ret
	default:
		return E_NOT_OK;
 3fe:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return (ret);
}
 400:	08 95       	ret

00000402 <ADC_ReadChannel>:


STD_ReturnType ADC_ReadChannel(adc_channel_t channel, u16 *adc_value)
{
	STD_ReturnType ret = E_OK;
	if (adc_value == NULL)
 402:	61 15       	cp	r22, r1
 404:	71 05       	cpc	r23, r1
 406:	09 f4       	brne	.+2      	; 0x40a <ADC_ReadChannel+0x8>
 408:	6f c0       	rjmp	.+222    	; 0x4e8 <ADC_ReadChannel+0xe6>
	{
		return E_NOT_OK;
	}
	/* single conversion mode */
	switch (channel) {
 40a:	82 30       	cpi	r24, 0x02	; 2
 40c:	39 f1       	breq	.+78     	; 0x45c <ADC_ReadChannel+0x5a>
 40e:	28 f4       	brcc	.+10     	; 0x41a <ADC_ReadChannel+0x18>
 410:	88 23       	and	r24, r24
 412:	51 f0       	breq	.+20     	; 0x428 <ADC_ReadChannel+0x26>
 414:	81 30       	cpi	r24, 0x01	; 1
 416:	a9 f0       	breq	.+42     	; 0x442 <ADC_ReadChannel+0x40>
 418:	55 c0       	rjmp	.+170    	; 0x4c4 <ADC_ReadChannel+0xc2>
 41a:	84 30       	cpi	r24, 0x04	; 4
 41c:	c9 f1       	breq	.+114    	; 0x490 <ADC_ReadChannel+0x8e>
 41e:	58 f1       	brcs	.+86     	; 0x476 <ADC_ReadChannel+0x74>
 420:	85 30       	cpi	r24, 0x05	; 5
 422:	09 f4       	brne	.+2      	; 0x426 <ADC_ReadChannel+0x24>
 424:	42 c0       	rjmp	.+132    	; 0x4aa <ADC_ReadChannel+0xa8>
 426:	4e c0       	rjmp	.+156    	; 0x4c4 <ADC_ReadChannel+0xc2>
		case ADC0_INDEX:
		CLEAR_BIT(ADMUX, MUX0);
 428:	ec e7       	ldi	r30, 0x7C	; 124
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	8e 7f       	andi	r24, 0xFE	; 254
 430:	80 83       	st	Z, r24
		CLEAR_BIT(ADMUX, MUX1);
 432:	80 81       	ld	r24, Z
 434:	8d 7f       	andi	r24, 0xFD	; 253
 436:	80 83       	st	Z, r24
		CLEAR_BIT(ADMUX, MUX2);
 438:	80 81       	ld	r24, Z
 43a:	8b 7f       	andi	r24, 0xFB	; 251
 43c:	80 83       	st	Z, r24



STD_ReturnType ADC_ReadChannel(adc_channel_t channel, u16 *adc_value)
{
	STD_ReturnType ret = E_OK;
 43e:	80 e0       	ldi	r24, 0x00	; 0
	switch (channel) {
		case ADC0_INDEX:
		CLEAR_BIT(ADMUX, MUX0);
		CLEAR_BIT(ADMUX, MUX1);
		CLEAR_BIT(ADMUX, MUX2);
		break;
 440:	42 c0       	rjmp	.+132    	; 0x4c6 <ADC_ReadChannel+0xc4>
		case ADC1_INDEX:
		SET_BIT(ADMUX, MUX0);
 442:	ec e7       	ldi	r30, 0x7C	; 124
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	81 60       	ori	r24, 0x01	; 1
 44a:	80 83       	st	Z, r24
		CLEAR_BIT(ADMUX, MUX1);
 44c:	80 81       	ld	r24, Z
 44e:	8d 7f       	andi	r24, 0xFD	; 253
 450:	80 83       	st	Z, r24
		CLEAR_BIT(ADMUX, MUX2);
 452:	80 81       	ld	r24, Z
 454:	8b 7f       	andi	r24, 0xFB	; 251
 456:	80 83       	st	Z, r24



STD_ReturnType ADC_ReadChannel(adc_channel_t channel, u16 *adc_value)
{
	STD_ReturnType ret = E_OK;
 458:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case ADC1_INDEX:
		SET_BIT(ADMUX, MUX0);
		CLEAR_BIT(ADMUX, MUX1);
		CLEAR_BIT(ADMUX, MUX2);
		break;
 45a:	35 c0       	rjmp	.+106    	; 0x4c6 <ADC_ReadChannel+0xc4>
		case ADC2_INDEX:
		CLEAR_BIT(ADMUX, MUX0);
 45c:	ec e7       	ldi	r30, 0x7C	; 124
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	8e 7f       	andi	r24, 0xFE	; 254
 464:	80 83       	st	Z, r24
		SET_BIT(ADMUX, MUX1);
 466:	80 81       	ld	r24, Z
 468:	82 60       	ori	r24, 0x02	; 2
 46a:	80 83       	st	Z, r24
		CLEAR_BIT(ADMUX, MUX2);
 46c:	80 81       	ld	r24, Z
 46e:	8b 7f       	andi	r24, 0xFB	; 251
 470:	80 83       	st	Z, r24



STD_ReturnType ADC_ReadChannel(adc_channel_t channel, u16 *adc_value)
{
	STD_ReturnType ret = E_OK;
 472:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case ADC2_INDEX:
		CLEAR_BIT(ADMUX, MUX0);
		SET_BIT(ADMUX, MUX1);
		CLEAR_BIT(ADMUX, MUX2);
		break;
 474:	28 c0       	rjmp	.+80     	; 0x4c6 <ADC_ReadChannel+0xc4>
		case ADC3_INDEX:
		SET_BIT(ADMUX, MUX0);
 476:	ec e7       	ldi	r30, 0x7C	; 124
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	81 60       	ori	r24, 0x01	; 1
 47e:	80 83       	st	Z, r24
		SET_BIT(ADMUX, MUX1);
 480:	80 81       	ld	r24, Z
 482:	82 60       	ori	r24, 0x02	; 2
 484:	80 83       	st	Z, r24
		CLEAR_BIT(ADMUX, MUX2);
 486:	80 81       	ld	r24, Z
 488:	8b 7f       	andi	r24, 0xFB	; 251
 48a:	80 83       	st	Z, r24



STD_ReturnType ADC_ReadChannel(adc_channel_t channel, u16 *adc_value)
{
	STD_ReturnType ret = E_OK;
 48c:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case ADC3_INDEX:
		SET_BIT(ADMUX, MUX0);
		SET_BIT(ADMUX, MUX1);
		CLEAR_BIT(ADMUX, MUX2);
		break;
 48e:	1b c0       	rjmp	.+54     	; 0x4c6 <ADC_ReadChannel+0xc4>
		case ADC4_INDEX:
		CLEAR_BIT(ADMUX, MUX0);
 490:	ec e7       	ldi	r30, 0x7C	; 124
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	8e 7f       	andi	r24, 0xFE	; 254
 498:	80 83       	st	Z, r24
		CLEAR_BIT(ADMUX, MUX1);
 49a:	80 81       	ld	r24, Z
 49c:	8d 7f       	andi	r24, 0xFD	; 253
 49e:	80 83       	st	Z, r24
		SET_BIT(ADMUX, MUX2);
 4a0:	80 81       	ld	r24, Z
 4a2:	84 60       	ori	r24, 0x04	; 4
 4a4:	80 83       	st	Z, r24



STD_ReturnType ADC_ReadChannel(adc_channel_t channel, u16 *adc_value)
{
	STD_ReturnType ret = E_OK;
 4a6:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case ADC4_INDEX:
		CLEAR_BIT(ADMUX, MUX0);
		CLEAR_BIT(ADMUX, MUX1);
		SET_BIT(ADMUX, MUX2);
		break;
 4a8:	0e c0       	rjmp	.+28     	; 0x4c6 <ADC_ReadChannel+0xc4>
		case ADC5_INDEX:
		SET_BIT(ADMUX, MUX0);
 4aa:	ec e7       	ldi	r30, 0x7C	; 124
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	81 60       	ori	r24, 0x01	; 1
 4b2:	80 83       	st	Z, r24
		CLEAR_BIT(ADMUX, MUX1);
 4b4:	80 81       	ld	r24, Z
 4b6:	8d 7f       	andi	r24, 0xFD	; 253
 4b8:	80 83       	st	Z, r24
		SET_BIT(ADMUX, MUX2);
 4ba:	80 81       	ld	r24, Z
 4bc:	84 60       	ori	r24, 0x04	; 4
 4be:	80 83       	st	Z, r24



STD_ReturnType ADC_ReadChannel(adc_channel_t channel, u16 *adc_value)
{
	STD_ReturnType ret = E_OK;
 4c0:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case ADC5_INDEX:
		SET_BIT(ADMUX, MUX0);
		CLEAR_BIT(ADMUX, MUX1);
		SET_BIT(ADMUX, MUX2);
		break;
 4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <ADC_ReadChannel+0xc4>
		default:
		ret = E_NOT_OK;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	SET_BIT(ADCSRA, ADSC);
 4c6:	ea e7       	ldi	r30, 0x7A	; 122
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	90 81       	ld	r25, Z
 4cc:	90 64       	ori	r25, 0x40	; 64
 4ce:	90 83       	st	Z, r25
	
	while(READ_BIT(ADCSRA, ADSC));
 4d0:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 4d4:	96 fd       	sbrc	r25, 6
 4d6:	fc cf       	rjmp	.-8      	; 0x4d0 <ADC_ReadChannel+0xce>
	
	*adc_value = ADC;
 4d8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 4dc:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 4e0:	fb 01       	movw	r30, r22
 4e2:	31 83       	std	Z+1, r19	; 0x01
 4e4:	20 83       	st	Z, r18
	return (ret);
 4e6:	08 95       	ret
STD_ReturnType ADC_ReadChannel(adc_channel_t channel, u16 *adc_value)
{
	STD_ReturnType ret = E_OK;
	if (adc_value == NULL)
	{
		return E_NOT_OK;
 4e8:	81 e0       	ldi	r24, 0x01	; 1
	
	while(READ_BIT(ADCSRA, ADSC));
	
	*adc_value = ADC;
	return (ret);
 4ea:	08 95       	ret

000004ec <GPIO_WritePinValue>:

STD_ReturnType GPIO_WritePinValue(pin_config_t *_pin_config, logic_t logic)
{
	STD_ReturnType ret = E_OK;
	
	if (_pin_config == NULL || _pin_config->pin > MAX_PIN_NUMBER)
 4ec:	00 97       	sbiw	r24, 0x00	; 0
 4ee:	c9 f1       	breq	.+114    	; 0x562 <GPIO_WritePinValue+0x76>
 4f0:	dc 01       	movw	r26, r24
 4f2:	2c 91       	ld	r18, X
 4f4:	26 95       	lsr	r18
 4f6:	26 95       	lsr	r18
 4f8:	27 70       	andi	r18, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(logic) {
 4fa:	66 23       	and	r22, r22
 4fc:	19 f0       	breq	.+6      	; 0x504 <GPIO_WritePinValue+0x18>
 4fe:	61 30       	cpi	r22, 0x01	; 1
 500:	c9 f0       	breq	.+50     	; 0x534 <GPIO_WritePinValue+0x48>
 502:	31 c0       	rjmp	.+98     	; 0x566 <GPIO_WritePinValue+0x7a>
		case LOW:
			CLEAR_BIT(*port_registers[_pin_config->port], _pin_config->pin);
 504:	dc 01       	movw	r26, r24
 506:	ec 91       	ld	r30, X
 508:	e3 70       	andi	r30, 0x03	; 3
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	ee 0f       	add	r30, r30
 50e:	ff 1f       	adc	r31, r31
 510:	e6 5f       	subi	r30, 0xF6	; 246
 512:	fe 4f       	sbci	r31, 0xFE	; 254
 514:	01 90       	ld	r0, Z+
 516:	f0 81       	ld	r31, Z
 518:	e0 2d       	mov	r30, r0
 51a:	30 81       	ld	r19, Z
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <GPIO_WritePinValue+0x3a>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	2a 95       	dec	r18
 528:	e2 f7       	brpl	.-8      	; 0x522 <GPIO_WritePinValue+0x36>
 52a:	80 95       	com	r24
 52c:	83 23       	and	r24, r19
 52e:	80 83       	st	Z, r24
	return (ret);
}

STD_ReturnType GPIO_WritePinValue(pin_config_t *_pin_config, logic_t logic)
{
	STD_ReturnType ret = E_OK;
 530:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		switch(logic) {
		case LOW:
			CLEAR_BIT(*port_registers[_pin_config->port], _pin_config->pin);
			break;
 532:	08 95       	ret
		case HIGH:
			SET_BIT(*port_registers[_pin_config->port], _pin_config->pin);
 534:	dc 01       	movw	r26, r24
 536:	ec 91       	ld	r30, X
 538:	e3 70       	andi	r30, 0x03	; 3
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	ee 0f       	add	r30, r30
 53e:	ff 1f       	adc	r31, r31
 540:	e6 5f       	subi	r30, 0xF6	; 246
 542:	fe 4f       	sbci	r31, 0xFE	; 254
 544:	01 90       	ld	r0, Z+
 546:	f0 81       	ld	r31, Z
 548:	e0 2d       	mov	r30, r0
 54a:	30 81       	ld	r19, Z
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <GPIO_WritePinValue+0x6a>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	2a 95       	dec	r18
 558:	e2 f7       	brpl	.-8      	; 0x552 <GPIO_WritePinValue+0x66>
 55a:	83 2b       	or	r24, r19
 55c:	80 83       	st	Z, r24
	return (ret);
}

STD_ReturnType GPIO_WritePinValue(pin_config_t *_pin_config, logic_t logic)
{
	STD_ReturnType ret = E_OK;
 55e:	80 e0       	ldi	r24, 0x00	; 0
		case LOW:
			CLEAR_BIT(*port_registers[_pin_config->port], _pin_config->pin);
			break;
		case HIGH:
			SET_BIT(*port_registers[_pin_config->port], _pin_config->pin);
			break;
 560:	08 95       	ret
{
	STD_ReturnType ret = E_OK;
	
	if (_pin_config == NULL || _pin_config->pin > MAX_PIN_NUMBER)
	{
		ret = E_NOT_OK;
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	08 95       	ret
			break;
		case HIGH:
			SET_BIT(*port_registers[_pin_config->port], _pin_config->pin);
			break;
		default:
			ret = E_NOT_OK;
 566:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return (ret);
}
 568:	08 95       	ret

0000056a <GPIO_InitPin>:

STD_ReturnType GPIO_InitPin(pin_config_t *_pin_config)
{
	STD_ReturnType ret = E_OK;
		
	if (_pin_config == NULL || _pin_config->pin > MAX_PIN_NUMBER)
 56a:	00 97       	sbiw	r24, 0x00	; 0
 56c:	09 f4       	brne	.+2      	; 0x570 <GPIO_InitPin+0x6>
 56e:	66 c0       	rjmp	.+204    	; 0x63c <GPIO_InitPin+0xd2>
 570:	fc 01       	movw	r30, r24
 572:	20 81       	ld	r18, Z
 574:	26 95       	lsr	r18
 576:	26 95       	lsr	r18
 578:	27 70       	andi	r18, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(_pin_config->direction) {
 57a:	80 81       	ld	r24, Z
 57c:	82 95       	swap	r24
 57e:	86 95       	lsr	r24
 580:	86 95       	lsr	r24
 582:	83 70       	andi	r24, 0x03	; 3
 584:	81 30       	cpi	r24, 0x01	; 1
 586:	21 f0       	breq	.+8      	; 0x590 <GPIO_InitPin+0x26>
 588:	08 f1       	brcs	.+66     	; 0x5cc <GPIO_InitPin+0x62>
 58a:	82 30       	cpi	r24, 0x02	; 2
 58c:	e1 f1       	breq	.+120    	; 0x606 <GPIO_InitPin+0x9c>
 58e:	58 c0       	rjmp	.+176    	; 0x640 <GPIO_InitPin+0xd6>
			case INPUT:
				CLEAR_BIT(*ddr_registers[_pin_config->port], _pin_config->pin);
 590:	a0 81       	ld	r26, Z
 592:	a3 70       	andi	r26, 0x03	; 3
 594:	b0 e0       	ldi	r27, 0x00	; 0
 596:	aa 0f       	add	r26, r26
 598:	bb 1f       	adc	r27, r27
 59a:	a0 5f       	subi	r26, 0xF0	; 240
 59c:	be 4f       	sbci	r27, 0xFE	; 254
 59e:	0d 90       	ld	r0, X+
 5a0:	bc 91       	ld	r27, X
 5a2:	a0 2d       	mov	r26, r0
 5a4:	3c 91       	ld	r19, X
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <GPIO_InitPin+0x46>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	2a 95       	dec	r18
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <GPIO_InitPin+0x42>
 5b4:	80 95       	com	r24
 5b6:	83 23       	and	r24, r19
 5b8:	8c 93       	st	X, r24
				GPIO_WritePinValue(_pin_config, _pin_config->logic);
 5ba:	60 81       	ld	r22, Z
 5bc:	65 fb       	bst	r22, 5
 5be:	66 27       	eor	r22, r22
 5c0:	60 f9       	bld	r22, 0
 5c2:	cf 01       	movw	r24, r30
 5c4:	0e 94 76 02 	call	0x4ec	; 0x4ec <GPIO_WritePinValue>
	return (ret);
}

STD_ReturnType GPIO_InitPin(pin_config_t *_pin_config)
{
	STD_ReturnType ret = E_OK;
 5c8:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(_pin_config->direction) {
			case INPUT:
				CLEAR_BIT(*ddr_registers[_pin_config->port], _pin_config->pin);
				GPIO_WritePinValue(_pin_config, _pin_config->logic);
			break;
 5ca:	08 95       	ret
			case OUTPUT:
				SET_BIT(*ddr_registers[_pin_config->port], _pin_config->pin);
 5cc:	a0 81       	ld	r26, Z
 5ce:	a3 70       	andi	r26, 0x03	; 3
 5d0:	b0 e0       	ldi	r27, 0x00	; 0
 5d2:	aa 0f       	add	r26, r26
 5d4:	bb 1f       	adc	r27, r27
 5d6:	a0 5f       	subi	r26, 0xF0	; 240
 5d8:	be 4f       	sbci	r27, 0xFE	; 254
 5da:	0d 90       	ld	r0, X+
 5dc:	bc 91       	ld	r27, X
 5de:	a0 2d       	mov	r26, r0
 5e0:	3c 91       	ld	r19, X
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <GPIO_InitPin+0x82>
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	2a 95       	dec	r18
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <GPIO_InitPin+0x7e>
 5f0:	83 2b       	or	r24, r19
 5f2:	8c 93       	st	X, r24
				GPIO_WritePinValue(_pin_config, _pin_config->logic);
 5f4:	60 81       	ld	r22, Z
 5f6:	65 fb       	bst	r22, 5
 5f8:	66 27       	eor	r22, r22
 5fa:	60 f9       	bld	r22, 0
 5fc:	cf 01       	movw	r24, r30
 5fe:	0e 94 76 02 	call	0x4ec	; 0x4ec <GPIO_WritePinValue>
	return (ret);
}

STD_ReturnType GPIO_InitPin(pin_config_t *_pin_config)
{
	STD_ReturnType ret = E_OK;
 602:	80 e0       	ldi	r24, 0x00	; 0
				GPIO_WritePinValue(_pin_config, _pin_config->logic);
			break;
			case OUTPUT:
				SET_BIT(*ddr_registers[_pin_config->port], _pin_config->pin);
				GPIO_WritePinValue(_pin_config, _pin_config->logic);
				break;
 604:	08 95       	ret
			case INPUT_PLUP:
				CLEAR_BIT(*ddr_registers[_pin_config->port], _pin_config->pin);
 606:	a0 81       	ld	r26, Z
 608:	a3 70       	andi	r26, 0x03	; 3
 60a:	b0 e0       	ldi	r27, 0x00	; 0
 60c:	aa 0f       	add	r26, r26
 60e:	bb 1f       	adc	r27, r27
 610:	a0 5f       	subi	r26, 0xF0	; 240
 612:	be 4f       	sbci	r27, 0xFE	; 254
 614:	0d 90       	ld	r0, X+
 616:	bc 91       	ld	r27, X
 618:	a0 2d       	mov	r26, r0
 61a:	3c 91       	ld	r19, X
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	02 c0       	rjmp	.+4      	; 0x626 <GPIO_InitPin+0xbc>
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	2a 95       	dec	r18
 628:	e2 f7       	brpl	.-8      	; 0x622 <GPIO_InitPin+0xb8>
 62a:	80 95       	com	r24
 62c:	83 23       	and	r24, r19
 62e:	8c 93       	st	X, r24
				GPIO_WritePinValue(_pin_config, HIGH);
 630:	61 e0       	ldi	r22, 0x01	; 1
 632:	cf 01       	movw	r24, r30
 634:	0e 94 76 02 	call	0x4ec	; 0x4ec <GPIO_WritePinValue>
	return (ret);
}

STD_ReturnType GPIO_InitPin(pin_config_t *_pin_config)
{
	STD_ReturnType ret = E_OK;
 638:	80 e0       	ldi	r24, 0x00	; 0
				GPIO_WritePinValue(_pin_config, _pin_config->logic);
				break;
			case INPUT_PLUP:
				CLEAR_BIT(*ddr_registers[_pin_config->port], _pin_config->pin);
				GPIO_WritePinValue(_pin_config, HIGH);
				break;
 63a:	08 95       	ret
{
	STD_ReturnType ret = E_OK;
		
	if (_pin_config == NULL || _pin_config->pin > MAX_PIN_NUMBER)
	{
		ret = E_NOT_OK;
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	08 95       	ret
			case INPUT_PLUP:
				CLEAR_BIT(*ddr_registers[_pin_config->port], _pin_config->pin);
				GPIO_WritePinValue(_pin_config, HIGH);
				break;
			default:
				ret = E_NOT_OK;
 640:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return (ret);
}
 642:	08 95       	ret

00000644 <GPIO_ReadPinValue>:

STD_ReturnType GPIO_ReadPinValue(pin_config_t *_pin_config, logic_t *logic)
{
	STD_ReturnType ret = E_OK;
	
	if (_pin_config == NULL || logic == NULL)
 644:	00 97       	sbiw	r24, 0x00	; 0
 646:	f1 f0       	breq	.+60     	; 0x684 <GPIO_ReadPinValue+0x40>
 648:	61 15       	cp	r22, r1
 64a:	71 05       	cpc	r23, r1
 64c:	e9 f0       	breq	.+58     	; 0x688 <GPIO_ReadPinValue+0x44>
	{
		ret = E_NOT_OK;  
	}
	else
	{
		*logic = READ_BIT(*pin_registers[_pin_config->port], _pin_config->pin);
 64e:	fc 01       	movw	r30, r24
 650:	20 81       	ld	r18, Z
 652:	e2 2f       	mov	r30, r18
 654:	e3 70       	andi	r30, 0x03	; 3
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	ec 5f       	subi	r30, 0xFC	; 252
 65e:	fe 4f       	sbci	r31, 0xFE	; 254
 660:	01 90       	ld	r0, Z+
 662:	f0 81       	ld	r31, Z
 664:	e0 2d       	mov	r30, r0
 666:	80 81       	ld	r24, Z
 668:	26 95       	lsr	r18
 66a:	26 95       	lsr	r18
 66c:	27 70       	andi	r18, 0x07	; 7
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <GPIO_ReadPinValue+0x32>
 672:	95 95       	asr	r25
 674:	87 95       	ror	r24
 676:	2a 95       	dec	r18
 678:	e2 f7       	brpl	.-8      	; 0x672 <GPIO_ReadPinValue+0x2e>
 67a:	81 70       	andi	r24, 0x01	; 1
 67c:	fb 01       	movw	r30, r22
 67e:	80 83       	st	Z, r24
	return (ret);
}

STD_ReturnType GPIO_ReadPinValue(pin_config_t *_pin_config, logic_t *logic)
{
	STD_ReturnType ret = E_OK;
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	08 95       	ret
	
	if (_pin_config == NULL || logic == NULL)
	{
		ret = E_NOT_OK;  
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	08 95       	ret
 688:	81 e0       	ldi	r24, 0x01	; 1
	{
		*logic = READ_BIT(*pin_registers[_pin_config->port], _pin_config->pin);
	}
	
	return (ret);
}
 68a:	08 95       	ret

0000068c <UART_Init>:
STD_ReturnType UART_ReceiveByte(u8 *byte_value)
{
	while(!READ_BIT(UCSR0A, RXC0));
	*byte_value = UDR0;
	return (E_OK);
}
 68c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 690:	8c e0       	ldi	r24, 0x0C	; 12
 692:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 696:	e0 ec       	ldi	r30, 0xC0	; 192
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	82 60       	ori	r24, 0x02	; 2
 69e:	80 83       	st	Z, r24
 6a0:	e1 ec       	ldi	r30, 0xC1	; 193
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	88 60       	ori	r24, 0x08	; 8
 6a8:	80 83       	st	Z, r24
 6aa:	80 81       	ld	r24, Z
 6ac:	80 61       	ori	r24, 0x10	; 16
 6ae:	80 83       	st	Z, r24
 6b0:	e2 ec       	ldi	r30, 0xC2	; 194
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	84 60       	ori	r24, 0x04	; 4
 6b8:	80 83       	st	Z, r24
 6ba:	80 81       	ld	r24, Z
 6bc:	82 60       	ori	r24, 0x02	; 2
 6be:	80 83       	st	Z, r24
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	08 95       	ret

000006c4 <UART_TransmitByte>:
 6c4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 6c8:	95 ff       	sbrs	r25, 5
 6ca:	fc cf       	rjmp	.-8      	; 0x6c4 <UART_TransmitByte>
 6cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	08 95       	ret

000006d4 <UART_PrintString>:
STD_ReturnType UART_PrintString(const char *str)
{
 6d4:	0f 93       	push	r16
 6d6:	1f 93       	push	r17
 6d8:	cf 93       	push	r28
 6da:	8c 01       	movw	r16, r24
	u8 i = 0;
 6dc:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (str[i])
 6de:	03 c0       	rjmp	.+6      	; 0x6e6 <UART_PrintString+0x12>
	{
		UART_TransmitByte(str[i]);
 6e0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <UART_TransmitByte>
		i++;
 6e4:	cf 5f       	subi	r28, 0xFF	; 255
}
STD_ReturnType UART_PrintString(const char *str)
{
	u8 i = 0;
	
	while (str[i])
 6e6:	f8 01       	movw	r30, r16
 6e8:	ec 0f       	add	r30, r28
 6ea:	f1 1d       	adc	r31, r1
 6ec:	80 81       	ld	r24, Z
 6ee:	81 11       	cpse	r24, r1
 6f0:	f7 cf       	rjmp	.-18     	; 0x6e0 <UART_PrintString+0xc>
	{
		UART_TransmitByte(str[i]);
		i++;
	}
	return (E_OK);
}
 6f2:	cf 91       	pop	r28
 6f4:	1f 91       	pop	r17
 6f6:	0f 91       	pop	r16
 6f8:	08 95       	ret

000006fa <UART_PrintNumber>:

STD_ReturnType UART_PrintNumber(u16 number)
{
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
 702:	27 97       	sbiw	r28, 0x07	; 7
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	f8 94       	cli
 708:	de bf       	out	0x3e, r29	; 62
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 70e:	4a e0       	ldi	r20, 0x0A	; 10
 710:	be 01       	movw	r22, r28
 712:	6f 5f       	subi	r22, 0xFF	; 255
 714:	7f 4f       	sbci	r23, 0xFF	; 255
 716:	0e 94 a4 03 	call	0x748	; 0x748 <__itoa_ncheck>
	char str[7];
		
	itoa(number, str, 10);
	UART_PrintString(str);
 71a:	ce 01       	movw	r24, r28
 71c:	01 96       	adiw	r24, 0x01	; 1
 71e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <UART_PrintString>
	UART_TransmitByte('\n');
 722:	8a e0       	ldi	r24, 0x0A	; 10
 724:	0e 94 62 03 	call	0x6c4	; 0x6c4 <UART_TransmitByte>
	return (E_OK);
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	27 96       	adiw	r28, 0x07	; 7
 72c:	0f b6       	in	r0, 0x3f	; 63
 72e:	f8 94       	cli
 730:	de bf       	out	0x3e, r29	; 62
 732:	0f be       	out	0x3f, r0	; 63
 734:	cd bf       	out	0x3d, r28	; 61
 736:	df 91       	pop	r29
 738:	cf 91       	pop	r28
 73a:	08 95       	ret

0000073c <__tablejump2__>:
 73c:	ee 0f       	add	r30, r30
 73e:	ff 1f       	adc	r31, r31
 740:	05 90       	lpm	r0, Z+
 742:	f4 91       	lpm	r31, Z
 744:	e0 2d       	mov	r30, r0
 746:	09 94       	ijmp

00000748 <__itoa_ncheck>:
 748:	bb 27       	eor	r27, r27
 74a:	4a 30       	cpi	r20, 0x0A	; 10
 74c:	31 f4       	brne	.+12     	; 0x75a <__itoa_ncheck+0x12>
 74e:	99 23       	and	r25, r25
 750:	22 f4       	brpl	.+8      	; 0x75a <__itoa_ncheck+0x12>
 752:	bd e2       	ldi	r27, 0x2D	; 45
 754:	90 95       	com	r25
 756:	81 95       	neg	r24
 758:	9f 4f       	sbci	r25, 0xFF	; 255
 75a:	0c 94 b0 03 	jmp	0x760	; 0x760 <__utoa_common>

0000075e <__utoa_ncheck>:
 75e:	bb 27       	eor	r27, r27

00000760 <__utoa_common>:
 760:	fb 01       	movw	r30, r22
 762:	55 27       	eor	r21, r21
 764:	aa 27       	eor	r26, r26
 766:	88 0f       	add	r24, r24
 768:	99 1f       	adc	r25, r25
 76a:	aa 1f       	adc	r26, r26
 76c:	a4 17       	cp	r26, r20
 76e:	10 f0       	brcs	.+4      	; 0x774 <__utoa_common+0x14>
 770:	a4 1b       	sub	r26, r20
 772:	83 95       	inc	r24
 774:	50 51       	subi	r21, 0x10	; 16
 776:	b9 f7       	brne	.-18     	; 0x766 <__utoa_common+0x6>
 778:	a0 5d       	subi	r26, 0xD0	; 208
 77a:	aa 33       	cpi	r26, 0x3A	; 58
 77c:	08 f0       	brcs	.+2      	; 0x780 <__utoa_common+0x20>
 77e:	a9 5d       	subi	r26, 0xD9	; 217
 780:	a1 93       	st	Z+, r26
 782:	00 97       	sbiw	r24, 0x00	; 0
 784:	79 f7       	brne	.-34     	; 0x764 <__utoa_common+0x4>
 786:	b1 11       	cpse	r27, r1
 788:	b1 93       	st	Z+, r27
 78a:	11 92       	st	Z+, r1
 78c:	cb 01       	movw	r24, r22
 78e:	0c 94 c9 03 	jmp	0x792	; 0x792 <strrev>

00000792 <strrev>:
 792:	dc 01       	movw	r26, r24
 794:	fc 01       	movw	r30, r24
 796:	67 2f       	mov	r22, r23
 798:	71 91       	ld	r23, Z+
 79a:	77 23       	and	r23, r23
 79c:	e1 f7       	brne	.-8      	; 0x796 <strrev+0x4>
 79e:	32 97       	sbiw	r30, 0x02	; 2
 7a0:	04 c0       	rjmp	.+8      	; 0x7aa <strrev+0x18>
 7a2:	7c 91       	ld	r23, X
 7a4:	6d 93       	st	X+, r22
 7a6:	70 83       	st	Z, r23
 7a8:	62 91       	ld	r22, -Z
 7aa:	ae 17       	cp	r26, r30
 7ac:	bf 07       	cpc	r27, r31
 7ae:	c8 f3       	brcs	.-14     	; 0x7a2 <strrev+0x10>
 7b0:	08 95       	ret

000007b2 <_exit>:
 7b2:	f8 94       	cli

000007b4 <__stop_program>:
 7b4:	ff cf       	rjmp	.-2      	; 0x7b4 <__stop_program>
