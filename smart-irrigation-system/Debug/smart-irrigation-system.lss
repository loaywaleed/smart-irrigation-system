
smart-irrigation-system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000005a8  0000063c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  0000064c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000157f  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa1  00000000  00000000  00001d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015f4  00000000  00000000  000027c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00003db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007724  00000000  00000000  00003f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e2  00000000  00000000  0000b68c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000c06e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002ef3  00000000  00000000  0000c116  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	3a c0       	rjmp	.+116    	; 0x76 <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	52 01       	movw	r10, r4
  6a:	5b 01       	movw	r10, r22
  6c:	67 01       	movw	r12, r14
  6e:	73 01       	movw	r14, r6
  70:	7f 01       	movw	r14, r30
  72:	8b 01       	movw	r16, r22
  74:	97 01       	movw	r18, r14

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e8 ea       	ldi	r30, 0xA8	; 168
  8a:	f5 e0       	ldi	r31, 0x05	; 5
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a0 31       	cpi	r26, 0x10	; 16
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e1       	ldi	r26, 0x10	; 16
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 31       	cpi	r26, 0x11	; 17
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	7d d0       	rcall	.+250    	; 0x1a4 <main>
  aa:	7c c2       	rjmp	.+1272   	; 0x5a4 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <LED_Initialize>:
 *  Author: Loay
 */ 
#include "ecu_led.h"

STD_ReturnType LED_Initialize(const led_config_t *led_config)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	1f 92       	push	r1
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	fc 01       	movw	r30, r24
	STD_ReturnType ret = E_OK;
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
  ba:	30 81       	ld	r19, Z
  bc:	43 2f       	mov	r20, r19
  be:	43 70       	andi	r20, 0x03	; 3
  c0:	99 81       	ldd	r25, Y+1	; 0x01
  c2:	90 7e       	andi	r25, 0xE0	; 224
  c4:	23 2f       	mov	r18, r19
  c6:	26 95       	lsr	r18
  c8:	2c 71       	andi	r18, 0x1C	; 28
  ca:	94 2b       	or	r25, r20
							 .logic = led_config->led_status };
  cc:	36 fb       	bst	r19, 6
  ce:	33 27       	eor	r19, r19
  d0:	30 f9       	bld	r19, 0
#include "ecu_led.h"

STD_ReturnType LED_Initialize(const led_config_t *led_config)
{
	STD_ReturnType ret = E_OK;
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
  d2:	92 2b       	or	r25, r18
  d4:	30 fb       	bst	r19, 0
  d6:	95 f9       	bld	r25, 5
  d8:	9f 73       	andi	r25, 0x3F	; 63
  da:	99 83       	std	Y+1, r25	; 0x01
							 .logic = led_config->led_status };

	if (led_config == NULL)
  dc:	ef 2b       	or	r30, r31
  de:	29 f0       	breq	.+10     	; 0xea <LED_Initialize+0x3c>
	{
		ret = E_NOT_OK;
	}
	else
	{
		GPIO_InitPin(&pin_obj);
  e0:	ce 01       	movw	r24, r28
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	e7 d1       	rcall	.+974    	; 0x4b4 <GPIO_InitPin>
 */ 
#include "ecu_led.h"

STD_ReturnType LED_Initialize(const led_config_t *led_config)
{
	STD_ReturnType ret = E_OK;
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	01 c0       	rjmp	.+2      	; 0xec <LED_Initialize+0x3e>
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
							 .logic = led_config->led_status };

	if (led_config == NULL)
	{
		ret = E_NOT_OK;
  ea:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		GPIO_InitPin(&pin_obj);
	}
	return (ret);
}
  ec:	0f 90       	pop	r0
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <LED_TurnOn>:

STD_ReturnType LED_TurnOn(const led_config_t *led_config)
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	1f 92       	push	r1
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	fc 01       	movw	r30, r24
	STD_ReturnType ret = E_OK;
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
 100:	30 81       	ld	r19, Z
 102:	43 2f       	mov	r20, r19
 104:	43 70       	andi	r20, 0x03	; 3
 106:	99 81       	ldd	r25, Y+1	; 0x01
 108:	90 7e       	andi	r25, 0xE0	; 224
 10a:	23 2f       	mov	r18, r19
 10c:	26 95       	lsr	r18
 10e:	2c 71       	andi	r18, 0x1C	; 28
 110:	94 2b       	or	r25, r20
	.logic = led_config->led_status };
 112:	36 fb       	bst	r19, 6
 114:	33 27       	eor	r19, r19
 116:	30 f9       	bld	r19, 0
}

STD_ReturnType LED_TurnOn(const led_config_t *led_config)
{
	STD_ReturnType ret = E_OK;
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
 118:	92 2b       	or	r25, r18
 11a:	30 fb       	bst	r19, 0
 11c:	95 f9       	bld	r25, 5
 11e:	9f 73       	andi	r25, 0x3F	; 63
 120:	99 83       	std	Y+1, r25	; 0x01
	.logic = led_config->led_status };

	if (led_config == NULL)
 122:	ef 2b       	or	r30, r31
 124:	31 f0       	breq	.+12     	; 0x132 <LED_TurnOn+0x3e>
	{
		ret = E_NOT_OK;
	}
	else
	{
		GPIO_WritePinValue(&pin_obj, HIGH);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	ce 01       	movw	r24, r28
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	82 d1       	rcall	.+772    	; 0x432 <GPIO_WritePinValue>
	return (ret);
}

STD_ReturnType LED_TurnOn(const led_config_t *led_config)
{
	STD_ReturnType ret = E_OK;
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	01 c0       	rjmp	.+2      	; 0x134 <LED_TurnOn+0x40>
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
	.logic = led_config->led_status };

	if (led_config == NULL)
	{
		ret = E_NOT_OK;
 132:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		GPIO_WritePinValue(&pin_obj, HIGH);
	}
	return (ret);	
}
 134:	0f 90       	pop	r0
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <LED_TurnOff>:

STD_ReturnType LED_TurnOff(const led_config_t *led_config)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	1f 92       	push	r1
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	fc 01       	movw	r30, r24
	STD_ReturnType ret = E_OK;
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
 148:	30 81       	ld	r19, Z
 14a:	43 2f       	mov	r20, r19
 14c:	43 70       	andi	r20, 0x03	; 3
 14e:	99 81       	ldd	r25, Y+1	; 0x01
 150:	90 7e       	andi	r25, 0xE0	; 224
 152:	23 2f       	mov	r18, r19
 154:	26 95       	lsr	r18
 156:	2c 71       	andi	r18, 0x1C	; 28
 158:	94 2b       	or	r25, r20
	.logic = led_config->led_status };
 15a:	36 fb       	bst	r19, 6
 15c:	33 27       	eor	r19, r19
 15e:	30 f9       	bld	r19, 0
}

STD_ReturnType LED_TurnOff(const led_config_t *led_config)
{
	STD_ReturnType ret = E_OK;
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
 160:	92 2b       	or	r25, r18
 162:	30 fb       	bst	r19, 0
 164:	95 f9       	bld	r25, 5
 166:	9f 73       	andi	r25, 0x3F	; 63
 168:	99 83       	std	Y+1, r25	; 0x01
	.logic = led_config->led_status };
	if (led_config == NULL)
 16a:	ef 2b       	or	r30, r31
 16c:	31 f0       	breq	.+12     	; 0x17a <LED_TurnOff+0x3e>
	{
		ret = E_NOT_OK;
	}
	else
	{
		GPIO_WritePinValue(&pin_obj, LOW);
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	ce 01       	movw	r24, r28
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	5e d1       	rcall	.+700    	; 0x432 <GPIO_WritePinValue>
	return (ret);	
}

STD_ReturnType LED_TurnOff(const led_config_t *led_config)
{
	STD_ReturnType ret = E_OK;
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	01 c0       	rjmp	.+2      	; 0x17c <LED_TurnOff+0x40>
	pin_config_t pin_obj = { .port = led_config->port, .pin = led_config->pin, .direction = OUTPUT,
	.logic = led_config->led_status };
	if (led_config == NULL)
	{
		ret = E_NOT_OK;
 17a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		GPIO_WritePinValue(&pin_obj, LOW);
	}
	return (ret);		
}
 17c:	0f 90       	pop	r0
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <APP_Init>:
};

/* Initialization */
void APP_Init(void)
{
	GPIO_InitPin(&pump);
 184:	80 e1       	ldi	r24, 0x10	; 16
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	95 d1       	rcall	.+810    	; 0x4b4 <GPIO_InitPin>
	//GPIO_InitPin(&level_switch);
	GPIO_InitPin(&moisture_sensor);
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	92 d1       	rcall	.+804    	; 0x4b4 <GPIO_InitPin>
	/* Turn on moisture sensor */
	GPIO_InitPin(&sensor_power);
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	8f d1       	rcall	.+798    	; 0x4b4 <GPIO_InitPin>
	ADC_Init(DIV_8, AVCC_INDEX);
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	4f d0       	rcall	.+158    	; 0x23a <ADC_Init>
	LED_Initialize(&dry_indicator);
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	86 cf       	rjmp	.-244    	; 0xae <LED_Initialize>
 1a2:	08 95       	ret

000001a4 <main>:
 1a4:	cf 93       	push	r28
}

/* Entry point */
int main(void)
{
 1a6:	df 93       	push	r29
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <main+0x6>
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
	logic_t tank_value;
	STD_ReturnType ret;
	u16 moisture_reading;
	
	APP_Init();
 1ae:	ea df       	rcall	.-44     	; 0x184 <APP_Init>
    while (1) 
    {
		//ret = GPIO_ReadPinValue(&level_switch, &tank_value);
		tank_value = HIGH;
		/* Reading moisture sensor value */
		ret = ADC_ReadChannel(ADC3_INDEX, &moisture_reading);
 1b0:	be 01       	movw	r22, r28
 1b2:	6f 5f       	subi	r22, 0xFF	; 255
 1b4:	7f 4f       	sbci	r23, 0xFF	; 255
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	c8 d0       	rcall	.+400    	; 0x34a <ADC_ReadChannel>
		//ret = UART_PrintString("Soil Moisture Reading is: \n");
		//ret = UART_PrintNumber(moisture_reading);
		//ret = UART_TransmitByte('\n');
		ret = GPIO_WritePinValue(&sensor_power, HIGH);
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	38 d1       	rcall	.+624    	; 0x432 <GPIO_WritePinValue>
		
		if (tank_value == HIGH)
		{
			if (moisture_reading > 435 && moisture_reading <= 560)
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	9c 01       	movw	r18, r24
 1c8:	24 5b       	subi	r18, 0xB4	; 180
 1ca:	31 40       	sbci	r19, 0x01	; 1
 1cc:	2d 37       	cpi	r18, 0x7D	; 125
 1ce:	31 05       	cpc	r19, r1
 1d0:	40 f4       	brcc	.+16     	; 0x1e2 <main+0x3e>
			{
				//ret = UART_PrintString("Soil is dry\n");
				ret = GPIO_WritePinValue(&pump, HIGH);
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	80 e1       	ldi	r24, 0x10	; 16
 1d6:	91 e0       	ldi	r25, 0x01	; 1
				ret = LED_TurnOn(&dry_indicator);
 1d8:	2c d1       	rcall	.+600    	; 0x432 <GPIO_WritePinValue>
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	8a df       	rcall	.-236    	; 0xf4 <LED_TurnOn>
 1e0:	22 c0       	rjmp	.+68     	; 0x226 <main+0x82>
			}
			else if (moisture_reading > 315 && moisture_reading <= 435)
 1e2:	9c 01       	movw	r18, r24
 1e4:	2c 53       	subi	r18, 0x3C	; 60
 1e6:	31 40       	sbci	r19, 0x01	; 1
 1e8:	28 37       	cpi	r18, 0x78	; 120
 1ea:	31 05       	cpc	r19, r1
			{
				ret = GPIO_WritePinValue(&pump, LOW);
 1ec:	40 f4       	brcc	.+16     	; 0x1fe <main+0x5a>
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	80 e1       	ldi	r24, 0x10	; 16
 1f2:	91 e0       	ldi	r25, 0x01	; 1
				//ret = UART_PrintString("Soil is wet\n");
				ret = LED_TurnOff(&dry_indicator);
 1f4:	1e d1       	rcall	.+572    	; 0x432 <GPIO_WritePinValue>
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	a0 df       	rcall	.-192    	; 0x13c <LED_TurnOff>
 1fc:	14 c0       	rjmp	.+40     	; 0x226 <main+0x82>
			}
			else if (moisture_reading >= 195 && moisture_reading <= 315)
 1fe:	83 5c       	subi	r24, 0xC3	; 195
 200:	91 09       	sbc	r25, r1
 202:	89 37       	cpi	r24, 0x79	; 121
 204:	91 05       	cpc	r25, r1
			{
				ret = GPIO_WritePinValue(&pump, LOW);
 206:	40 f4       	brcc	.+16     	; 0x218 <main+0x74>
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	80 e1       	ldi	r24, 0x10	; 16
 20c:	91 e0       	ldi	r25, 0x01	; 1
				//ret = UART_PrintString("Soil is very wet\n");
				ret = LED_TurnOff(&dry_indicator);
 20e:	11 d1       	rcall	.+546    	; 0x432 <GPIO_WritePinValue>
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	93 df       	rcall	.-218    	; 0x13c <LED_TurnOff>
			}
			else 
			{
				ret = LED_TurnOff(&dry_indicator);
 216:	07 c0       	rjmp	.+14     	; 0x226 <main+0x82>
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	8f df       	rcall	.-226    	; 0x13c <LED_TurnOff>
				ret = GPIO_WritePinValue(&pump, LOW);
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	80 e1       	ldi	r24, 0x10	; 16
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	06 d1       	rcall	.+524    	; 0x432 <GPIO_WritePinValue>
 226:	2f e9       	ldi	r18, 0x9F	; 159
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	86 e8       	ldi	r24, 0x86	; 134
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <main+0x88>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x92>
 236:	00 00       	nop
 238:	bb cf       	rjmp	.-138    	; 0x1b0 <main+0xc>

0000023a <ADC_Init>:
 23a:	e8 2f       	mov	r30, r24
STD_ReturnType ADC_Init(adc_prescaler_t clock, voltage_ref_t v_ref)
{
	STD_ReturnType ret = E_OK;
	
	//Enable ADC
	SET_BIT(ADCSRA, ADEN);
 23c:	aa e7       	ldi	r26, 0x7A	; 122
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	8c 91       	ld	r24, X
 242:	80 68       	ori	r24, 0x80	; 128
 244:	8c 93       	st	X, r24
	
	switch (v_ref) {
 246:	61 30       	cpi	r22, 0x01	; 1
 248:	71 f0       	breq	.+28     	; 0x266 <ADC_Init+0x2c>
 24a:	18 f0       	brcs	.+6      	; 0x252 <ADC_Init+0x18>
 24c:	62 30       	cpi	r22, 0x02	; 2
 24e:	a9 f0       	breq	.+42     	; 0x27a <ADC_Init+0x40>
 250:	1e c0       	rjmp	.+60     	; 0x28e <ADC_Init+0x54>
	case AREF_INDEX:
		CLEAR_BIT(ADMUX, REFS0);
 252:	ac e7       	ldi	r26, 0x7C	; 124
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	8c 91       	ld	r24, X
 258:	8f 7b       	andi	r24, 0xBF	; 191
 25a:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX, REFS1);
 25c:	8c 91       	ld	r24, X
 25e:	8f 77       	andi	r24, 0x7F	; 127
 260:	8c 93       	st	X, r24

#include "hal_adc.h"

STD_ReturnType ADC_Init(adc_prescaler_t clock, voltage_ref_t v_ref)
{
	STD_ReturnType ret = E_OK;
 262:	80 e0       	ldi	r24, 0x00	; 0
	
	switch (v_ref) {
	case AREF_INDEX:
		CLEAR_BIT(ADMUX, REFS0);
		CLEAR_BIT(ADMUX, REFS1);
		break;
 264:	15 c0       	rjmp	.+42     	; 0x290 <ADC_Init+0x56>
	case AVCC_INDEX:
		SET_BIT(ADMUX, REFS0);
 266:	ac e7       	ldi	r26, 0x7C	; 124
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	8c 91       	ld	r24, X
 26c:	80 64       	ori	r24, 0x40	; 64
 26e:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX, REFS1);
 270:	8c 91       	ld	r24, X
 272:	8f 77       	andi	r24, 0x7F	; 127
 274:	8c 93       	st	X, r24

#include "hal_adc.h"

STD_ReturnType ADC_Init(adc_prescaler_t clock, voltage_ref_t v_ref)
{
	STD_ReturnType ret = E_OK;
 276:	80 e0       	ldi	r24, 0x00	; 0
		CLEAR_BIT(ADMUX, REFS1);
		break;
	case AVCC_INDEX:
		SET_BIT(ADMUX, REFS0);
		CLEAR_BIT(ADMUX, REFS1);
		break;
 278:	0b c0       	rjmp	.+22     	; 0x290 <ADC_Init+0x56>
	case INTERNAL_INDEX:
		SET_BIT(ADMUX, REFS0);
 27a:	ac e7       	ldi	r26, 0x7C	; 124
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	8c 91       	ld	r24, X
 280:	80 64       	ori	r24, 0x40	; 64
 282:	8c 93       	st	X, r24
		SET_BIT(ADMUX, REFS1);
 284:	8c 91       	ld	r24, X
 286:	80 68       	ori	r24, 0x80	; 128
 288:	8c 93       	st	X, r24

#include "hal_adc.h"

STD_ReturnType ADC_Init(adc_prescaler_t clock, voltage_ref_t v_ref)
{
	STD_ReturnType ret = E_OK;
 28a:	80 e0       	ldi	r24, 0x00	; 0
		CLEAR_BIT(ADMUX, REFS1);
		break;
	case INTERNAL_INDEX:
		SET_BIT(ADMUX, REFS0);
		SET_BIT(ADMUX, REFS1);
		break;
 28c:	01 c0       	rjmp	.+2      	; 0x290 <ADC_Init+0x56>
	default:
		ret = E_NOT_OK;
 28e:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (clock) {
 290:	4e 2f       	mov	r20, r30
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	47 30       	cpi	r20, 0x07	; 7
 296:	51 05       	cpc	r21, r1
 298:	08 f0       	brcs	.+2      	; 0x29c <ADC_Init+0x62>
 29a:	55 c0       	rjmp	.+170    	; 0x346 <ADC_Init+0x10c>
 29c:	fa 01       	movw	r30, r20
 29e:	ec 5c       	subi	r30, 0xCC	; 204
 2a0:	ff 4f       	sbci	r31, 0xFF	; 255
 2a2:	7a c1       	rjmp	.+756    	; 0x598 <__tablejump2__>
	case DIV_2:
		CLEAR_BIT(ADCSRA, ADPS2);
 2a4:	ea e7       	ldi	r30, 0x7A	; 122
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	90 81       	ld	r25, Z
 2aa:	9b 7f       	andi	r25, 0xFB	; 251
 2ac:	90 83       	st	Z, r25
		CLEAR_BIT(ADCSRA, ADPS1);
 2ae:	90 81       	ld	r25, Z
 2b0:	9d 7f       	andi	r25, 0xFD	; 253
 2b2:	90 83       	st	Z, r25
	break;
 2b4:	08 95       	ret
	case DIV_4:
		CLEAR_BIT(ADCSRA, ADPS2);
 2b6:	ea e7       	ldi	r30, 0x7A	; 122
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	90 81       	ld	r25, Z
 2bc:	9b 7f       	andi	r25, 0xFB	; 251
 2be:	90 83       	st	Z, r25
		SET_BIT(ADCSRA, ADPS1);
 2c0:	90 81       	ld	r25, Z
 2c2:	92 60       	ori	r25, 0x02	; 2
 2c4:	90 83       	st	Z, r25
		CLEAR_BIT(ADCSRA, ADPS0);
 2c6:	90 81       	ld	r25, Z
 2c8:	9e 7f       	andi	r25, 0xFE	; 254
 2ca:	90 83       	st	Z, r25
		break;
 2cc:	08 95       	ret
	case DIV_8:
		CLEAR_BIT(ADCSRA, ADPS2);
 2ce:	ea e7       	ldi	r30, 0x7A	; 122
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	90 81       	ld	r25, Z
 2d4:	9b 7f       	andi	r25, 0xFB	; 251
 2d6:	90 83       	st	Z, r25
		SET_BIT(ADCSRA, ADPS1);
 2d8:	90 81       	ld	r25, Z
 2da:	92 60       	ori	r25, 0x02	; 2
 2dc:	90 83       	st	Z, r25
		SET_BIT(ADCSRA, ADPS0);
 2de:	90 81       	ld	r25, Z
 2e0:	91 60       	ori	r25, 0x01	; 1
 2e2:	90 83       	st	Z, r25
		break;
 2e4:	08 95       	ret
	case DIV_16:
		SET_BIT(ADCSRA, ADPS2);
 2e6:	ea e7       	ldi	r30, 0x7A	; 122
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	90 81       	ld	r25, Z
 2ec:	94 60       	ori	r25, 0x04	; 4
 2ee:	90 83       	st	Z, r25
		CLEAR_BIT(ADCSRA, ADPS1);
 2f0:	90 81       	ld	r25, Z
 2f2:	9d 7f       	andi	r25, 0xFD	; 253
 2f4:	90 83       	st	Z, r25
		CLEAR_BIT(ADCSRA, ADPS0);
 2f6:	90 81       	ld	r25, Z
 2f8:	9e 7f       	andi	r25, 0xFE	; 254
 2fa:	90 83       	st	Z, r25
		break;
 2fc:	08 95       	ret
	case DIV_32:
		SET_BIT(ADCSRA, ADPS2);
 2fe:	ea e7       	ldi	r30, 0x7A	; 122
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	90 81       	ld	r25, Z
 304:	94 60       	ori	r25, 0x04	; 4
 306:	90 83       	st	Z, r25
		CLEAR_BIT(ADCSRA, ADPS1);
 308:	90 81       	ld	r25, Z
 30a:	9d 7f       	andi	r25, 0xFD	; 253
 30c:	90 83       	st	Z, r25
		SET_BIT(ADCSRA, ADPS0);
 30e:	90 81       	ld	r25, Z
 310:	91 60       	ori	r25, 0x01	; 1
 312:	90 83       	st	Z, r25
		break;
 314:	08 95       	ret
	case DIV_64:
		SET_BIT(ADCSRA, ADPS2);
 316:	ea e7       	ldi	r30, 0x7A	; 122
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	90 81       	ld	r25, Z
 31c:	94 60       	ori	r25, 0x04	; 4
 31e:	90 83       	st	Z, r25
		SET_BIT(ADCSRA, ADPS1);
 320:	90 81       	ld	r25, Z
 322:	92 60       	ori	r25, 0x02	; 2
 324:	90 83       	st	Z, r25
		CLEAR_BIT(ADCSRA, ADPS0);
 326:	90 81       	ld	r25, Z
 328:	9e 7f       	andi	r25, 0xFE	; 254
 32a:	90 83       	st	Z, r25
		break;
 32c:	08 95       	ret
	case DIV_128:
		SET_BIT(ADCSRA, ADPS2);
 32e:	ea e7       	ldi	r30, 0x7A	; 122
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	90 81       	ld	r25, Z
 334:	94 60       	ori	r25, 0x04	; 4
 336:	90 83       	st	Z, r25
		SET_BIT(ADCSRA, ADPS1);
 338:	90 81       	ld	r25, Z
 33a:	92 60       	ori	r25, 0x02	; 2
 33c:	90 83       	st	Z, r25
		SET_BIT(ADCSRA, ADPS0);
 33e:	90 81       	ld	r25, Z
 340:	91 60       	ori	r25, 0x01	; 1
 342:	90 83       	st	Z, r25
		break;
 344:	08 95       	ret
	default:
		return E_NOT_OK;
 346:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return (ret);
}
 348:	08 95       	ret

0000034a <ADC_ReadChannel>:


STD_ReturnType ADC_ReadChannel(adc_channel_t channel, u16 *adc_value)
{
	STD_ReturnType ret = E_OK;
	if (adc_value == NULL)
 34a:	61 15       	cp	r22, r1
 34c:	71 05       	cpc	r23, r1
 34e:	09 f4       	brne	.+2      	; 0x352 <ADC_ReadChannel+0x8>
 350:	6e c0       	rjmp	.+220    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
		return E_NOT_OK;
	}
	/* single conversion mode */
	switch (channel) {
 352:	82 30       	cpi	r24, 0x02	; 2
 354:	39 f1       	breq	.+78     	; 0x3a4 <ADC_ReadChannel+0x5a>
 356:	28 f4       	brcc	.+10     	; 0x362 <ADC_ReadChannel+0x18>
 358:	88 23       	and	r24, r24
 35a:	51 f0       	breq	.+20     	; 0x370 <ADC_ReadChannel+0x26>
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	a9 f0       	breq	.+42     	; 0x38a <ADC_ReadChannel+0x40>
 360:	55 c0       	rjmp	.+170    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 362:	84 30       	cpi	r24, 0x04	; 4
 364:	c9 f1       	breq	.+114    	; 0x3d8 <ADC_ReadChannel+0x8e>
 366:	58 f1       	brcs	.+86     	; 0x3be <ADC_ReadChannel+0x74>
 368:	85 30       	cpi	r24, 0x05	; 5
 36a:	09 f4       	brne	.+2      	; 0x36e <ADC_ReadChannel+0x24>
 36c:	42 c0       	rjmp	.+132    	; 0x3f2 <ADC_ReadChannel+0xa8>
 36e:	4e c0       	rjmp	.+156    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		case ADC0_INDEX:
		CLEAR_BIT(ADMUX, MUX0);
 370:	ec e7       	ldi	r30, 0x7C	; 124
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	8e 7f       	andi	r24, 0xFE	; 254
 378:	80 83       	st	Z, r24
		CLEAR_BIT(ADMUX, MUX1);
 37a:	80 81       	ld	r24, Z
 37c:	8d 7f       	andi	r24, 0xFD	; 253
 37e:	80 83       	st	Z, r24
		CLEAR_BIT(ADMUX, MUX2);
 380:	80 81       	ld	r24, Z
 382:	8b 7f       	andi	r24, 0xFB	; 251
 384:	80 83       	st	Z, r24



STD_ReturnType ADC_ReadChannel(adc_channel_t channel, u16 *adc_value)
{
	STD_ReturnType ret = E_OK;
 386:	80 e0       	ldi	r24, 0x00	; 0
	switch (channel) {
		case ADC0_INDEX:
		CLEAR_BIT(ADMUX, MUX0);
		CLEAR_BIT(ADMUX, MUX1);
		CLEAR_BIT(ADMUX, MUX2);
		break;
 388:	42 c0       	rjmp	.+132    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		case ADC1_INDEX:
		SET_BIT(ADMUX, MUX0);
 38a:	ec e7       	ldi	r30, 0x7C	; 124
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	81 60       	ori	r24, 0x01	; 1
 392:	80 83       	st	Z, r24
		CLEAR_BIT(ADMUX, MUX1);
 394:	80 81       	ld	r24, Z
 396:	8d 7f       	andi	r24, 0xFD	; 253
 398:	80 83       	st	Z, r24
		CLEAR_BIT(ADMUX, MUX2);
 39a:	80 81       	ld	r24, Z
 39c:	8b 7f       	andi	r24, 0xFB	; 251
 39e:	80 83       	st	Z, r24



STD_ReturnType ADC_ReadChannel(adc_channel_t channel, u16 *adc_value)
{
	STD_ReturnType ret = E_OK;
 3a0:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case ADC1_INDEX:
		SET_BIT(ADMUX, MUX0);
		CLEAR_BIT(ADMUX, MUX1);
		CLEAR_BIT(ADMUX, MUX2);
		break;
 3a2:	35 c0       	rjmp	.+106    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		case ADC2_INDEX:
		CLEAR_BIT(ADMUX, MUX0);
 3a4:	ec e7       	ldi	r30, 0x7C	; 124
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	8e 7f       	andi	r24, 0xFE	; 254
 3ac:	80 83       	st	Z, r24
		SET_BIT(ADMUX, MUX1);
 3ae:	80 81       	ld	r24, Z
 3b0:	82 60       	ori	r24, 0x02	; 2
 3b2:	80 83       	st	Z, r24
		CLEAR_BIT(ADMUX, MUX2);
 3b4:	80 81       	ld	r24, Z
 3b6:	8b 7f       	andi	r24, 0xFB	; 251
 3b8:	80 83       	st	Z, r24



STD_ReturnType ADC_ReadChannel(adc_channel_t channel, u16 *adc_value)
{
	STD_ReturnType ret = E_OK;
 3ba:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case ADC2_INDEX:
		CLEAR_BIT(ADMUX, MUX0);
		SET_BIT(ADMUX, MUX1);
		CLEAR_BIT(ADMUX, MUX2);
		break;
 3bc:	28 c0       	rjmp	.+80     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		case ADC3_INDEX:
		SET_BIT(ADMUX, MUX0);
 3be:	ec e7       	ldi	r30, 0x7C	; 124
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	81 60       	ori	r24, 0x01	; 1
 3c6:	80 83       	st	Z, r24
		SET_BIT(ADMUX, MUX1);
 3c8:	80 81       	ld	r24, Z
 3ca:	82 60       	ori	r24, 0x02	; 2
 3cc:	80 83       	st	Z, r24
		CLEAR_BIT(ADMUX, MUX2);
 3ce:	80 81       	ld	r24, Z
 3d0:	8b 7f       	andi	r24, 0xFB	; 251
 3d2:	80 83       	st	Z, r24



STD_ReturnType ADC_ReadChannel(adc_channel_t channel, u16 *adc_value)
{
	STD_ReturnType ret = E_OK;
 3d4:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case ADC3_INDEX:
		SET_BIT(ADMUX, MUX0);
		SET_BIT(ADMUX, MUX1);
		CLEAR_BIT(ADMUX, MUX2);
		break;
 3d6:	1b c0       	rjmp	.+54     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		case ADC4_INDEX:
		CLEAR_BIT(ADMUX, MUX0);
 3d8:	ec e7       	ldi	r30, 0x7C	; 124
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	8e 7f       	andi	r24, 0xFE	; 254
 3e0:	80 83       	st	Z, r24
		CLEAR_BIT(ADMUX, MUX1);
 3e2:	80 81       	ld	r24, Z
 3e4:	8d 7f       	andi	r24, 0xFD	; 253
 3e6:	80 83       	st	Z, r24
		SET_BIT(ADMUX, MUX2);
 3e8:	80 81       	ld	r24, Z
 3ea:	84 60       	ori	r24, 0x04	; 4
 3ec:	80 83       	st	Z, r24



STD_ReturnType ADC_ReadChannel(adc_channel_t channel, u16 *adc_value)
{
	STD_ReturnType ret = E_OK;
 3ee:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case ADC4_INDEX:
		CLEAR_BIT(ADMUX, MUX0);
		CLEAR_BIT(ADMUX, MUX1);
		SET_BIT(ADMUX, MUX2);
		break;
 3f0:	0e c0       	rjmp	.+28     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		case ADC5_INDEX:
		SET_BIT(ADMUX, MUX0);
 3f2:	ec e7       	ldi	r30, 0x7C	; 124
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	81 60       	ori	r24, 0x01	; 1
 3fa:	80 83       	st	Z, r24
		CLEAR_BIT(ADMUX, MUX1);
 3fc:	80 81       	ld	r24, Z
 3fe:	8d 7f       	andi	r24, 0xFD	; 253
 400:	80 83       	st	Z, r24
		SET_BIT(ADMUX, MUX2);
 402:	80 81       	ld	r24, Z
 404:	84 60       	ori	r24, 0x04	; 4
 406:	80 83       	st	Z, r24



STD_ReturnType ADC_ReadChannel(adc_channel_t channel, u16 *adc_value)
{
	STD_ReturnType ret = E_OK;
 408:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case ADC5_INDEX:
		SET_BIT(ADMUX, MUX0);
		CLEAR_BIT(ADMUX, MUX1);
		SET_BIT(ADMUX, MUX2);
		break;
 40a:	01 c0       	rjmp	.+2      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		default:
		ret = E_NOT_OK;
 40c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	SET_BIT(ADCSRA, ADSC);
 40e:	ea e7       	ldi	r30, 0x7A	; 122
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	90 81       	ld	r25, Z
 414:	90 64       	ori	r25, 0x40	; 64
 416:	90 83       	st	Z, r25
	
	while(READ_BIT(ADCSRA, ADSC));
 418:	90 81       	ld	r25, Z
 41a:	96 fd       	sbrc	r25, 6
 41c:	fd cf       	rjmp	.-6      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
	
	*adc_value = ADC;
 41e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 422:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 426:	fb 01       	movw	r30, r22
 428:	31 83       	std	Z+1, r19	; 0x01
 42a:	20 83       	st	Z, r18
	return (ret);
 42c:	08 95       	ret
STD_ReturnType ADC_ReadChannel(adc_channel_t channel, u16 *adc_value)
{
	STD_ReturnType ret = E_OK;
	if (adc_value == NULL)
	{
		return E_NOT_OK;
 42e:	81 e0       	ldi	r24, 0x01	; 1
	
	while(READ_BIT(ADCSRA, ADSC));
	
	*adc_value = ADC;
	return (ret);
 430:	08 95       	ret

00000432 <GPIO_WritePinValue>:
	
	return (ret);
}

STD_ReturnType GPIO_WritePinValue(pin_config_t *_pin_config, logic_t logic)
{
 432:	fc 01       	movw	r30, r24
	STD_ReturnType ret = E_OK;
	
	if (_pin_config == NULL || _pin_config->pin > MAX_PIN_NUMBER)
 434:	89 2b       	or	r24, r25
 436:	d1 f1       	breq	.+116    	; 0x4ac <GPIO_WritePinValue+0x7a>
 438:	90 81       	ld	r25, Z
 43a:	96 95       	lsr	r25
 43c:	96 95       	lsr	r25
 43e:	97 70       	andi	r25, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(logic) {
 440:	66 23       	and	r22, r22
 442:	19 f0       	breq	.+6      	; 0x44a <GPIO_WritePinValue+0x18>
 444:	61 30       	cpi	r22, 0x01	; 1
 446:	d1 f0       	breq	.+52     	; 0x47c <GPIO_WritePinValue+0x4a>
 448:	33 c0       	rjmp	.+102    	; 0x4b0 <GPIO_WritePinValue+0x7e>
		case LOW:
			CLEAR_BIT(*port_registers[_pin_config->port], _pin_config->pin);
 44a:	e0 81       	ld	r30, Z
 44c:	e3 70       	andi	r30, 0x03	; 3
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	ee 0f       	add	r30, r30
 452:	ff 1f       	adc	r31, r31
 454:	ed 5f       	subi	r30, 0xFD	; 253
 456:	fe 4f       	sbci	r31, 0xFE	; 254
 458:	01 90       	ld	r0, Z+
 45a:	f0 81       	ld	r31, Z
 45c:	e0 2d       	mov	r30, r0
 45e:	40 81       	ld	r20, Z
 460:	21 e0       	ldi	r18, 0x01	; 1
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	b9 01       	movw	r22, r18
 466:	02 c0       	rjmp	.+4      	; 0x46c <GPIO_WritePinValue+0x3a>
 468:	66 0f       	add	r22, r22
 46a:	77 1f       	adc	r23, r23
 46c:	9a 95       	dec	r25
 46e:	e2 f7       	brpl	.-8      	; 0x468 <GPIO_WritePinValue+0x36>
 470:	cb 01       	movw	r24, r22
 472:	80 95       	com	r24
 474:	84 23       	and	r24, r20
 476:	80 83       	st	Z, r24
	return (ret);
}

STD_ReturnType GPIO_WritePinValue(pin_config_t *_pin_config, logic_t logic)
{
	STD_ReturnType ret = E_OK;
 478:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		switch(logic) {
		case LOW:
			CLEAR_BIT(*port_registers[_pin_config->port], _pin_config->pin);
			break;
 47a:	08 95       	ret
		case HIGH:
			SET_BIT(*port_registers[_pin_config->port], _pin_config->pin);
 47c:	e0 81       	ld	r30, Z
 47e:	e3 70       	andi	r30, 0x03	; 3
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	ee 0f       	add	r30, r30
 484:	ff 1f       	adc	r31, r31
 486:	ed 5f       	subi	r30, 0xFD	; 253
 488:	fe 4f       	sbci	r31, 0xFE	; 254
 48a:	01 90       	ld	r0, Z+
 48c:	f0 81       	ld	r31, Z
 48e:	e0 2d       	mov	r30, r0
 490:	40 81       	ld	r20, Z
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	b9 01       	movw	r22, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <GPIO_WritePinValue+0x6c>
 49a:	66 0f       	add	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	9a 95       	dec	r25
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <GPIO_WritePinValue+0x68>
 4a2:	cb 01       	movw	r24, r22
 4a4:	84 2b       	or	r24, r20
 4a6:	80 83       	st	Z, r24
	return (ret);
}

STD_ReturnType GPIO_WritePinValue(pin_config_t *_pin_config, logic_t logic)
{
	STD_ReturnType ret = E_OK;
 4a8:	80 e0       	ldi	r24, 0x00	; 0
		case LOW:
			CLEAR_BIT(*port_registers[_pin_config->port], _pin_config->pin);
			break;
		case HIGH:
			SET_BIT(*port_registers[_pin_config->port], _pin_config->pin);
			break;
 4aa:	08 95       	ret
{
	STD_ReturnType ret = E_OK;
	
	if (_pin_config == NULL || _pin_config->pin > MAX_PIN_NUMBER)
	{
		ret = E_NOT_OK;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	08 95       	ret
			break;
		case HIGH:
			SET_BIT(*port_registers[_pin_config->port], _pin_config->pin);
			break;
		default:
			ret = E_NOT_OK;
 4b0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return (ret);
}
 4b2:	08 95       	ret

000004b4 <GPIO_InitPin>:

STD_ReturnType GPIO_InitPin(pin_config_t *_pin_config)
{
	STD_ReturnType ret = E_OK;
		
	if (_pin_config == NULL || _pin_config->pin > MAX_PIN_NUMBER)
 4b4:	00 97       	sbiw	r24, 0x00	; 0
 4b6:	09 f4       	brne	.+2      	; 0x4ba <GPIO_InitPin+0x6>
 4b8:	6b c0       	rjmp	.+214    	; 0x590 <GPIO_InitPin+0xdc>
 4ba:	fc 01       	movw	r30, r24
 4bc:	80 81       	ld	r24, Z
 4be:	86 95       	lsr	r24
 4c0:	86 95       	lsr	r24
 4c2:	98 2f       	mov	r25, r24
 4c4:	97 70       	andi	r25, 0x07	; 7
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(_pin_config->direction) {
 4c6:	80 81       	ld	r24, Z
 4c8:	82 95       	swap	r24
 4ca:	86 95       	lsr	r24
 4cc:	86 95       	lsr	r24
 4ce:	83 70       	andi	r24, 0x03	; 3
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	29 f0       	breq	.+10     	; 0x4de <GPIO_InitPin+0x2a>
 4d4:	18 f1       	brcs	.+70     	; 0x51c <GPIO_InitPin+0x68>
 4d6:	82 30       	cpi	r24, 0x02	; 2
 4d8:	09 f4       	brne	.+2      	; 0x4dc <GPIO_InitPin+0x28>
 4da:	3e c0       	rjmp	.+124    	; 0x558 <GPIO_InitPin+0xa4>
 4dc:	5b c0       	rjmp	.+182    	; 0x594 <GPIO_InitPin+0xe0>
			case INPUT:
				CLEAR_BIT(*ddr_registers[_pin_config->port], _pin_config->pin);
 4de:	a0 81       	ld	r26, Z
 4e0:	a3 70       	andi	r26, 0x03	; 3
 4e2:	b0 e0       	ldi	r27, 0x00	; 0
 4e4:	aa 0f       	add	r26, r26
 4e6:	bb 1f       	adc	r27, r27
 4e8:	a7 5f       	subi	r26, 0xF7	; 247
 4ea:	be 4f       	sbci	r27, 0xFE	; 254
 4ec:	0d 90       	ld	r0, X+
 4ee:	bc 91       	ld	r27, X
 4f0:	a0 2d       	mov	r26, r0
 4f2:	4c 91       	ld	r20, X
 4f4:	21 e0       	ldi	r18, 0x01	; 1
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	b9 01       	movw	r22, r18
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <GPIO_InitPin+0x4c>
 4fc:	66 0f       	add	r22, r22
 4fe:	77 1f       	adc	r23, r23
 500:	9a 95       	dec	r25
 502:	e2 f7       	brpl	.-8      	; 0x4fc <GPIO_InitPin+0x48>
 504:	cb 01       	movw	r24, r22
 506:	80 95       	com	r24
 508:	84 23       	and	r24, r20
 50a:	8c 93       	st	X, r24
				GPIO_WritePinValue(_pin_config, _pin_config->logic);
 50c:	60 81       	ld	r22, Z
 50e:	65 fb       	bst	r22, 5
 510:	66 27       	eor	r22, r22
 512:	60 f9       	bld	r22, 0
 514:	cf 01       	movw	r24, r30
 516:	8d df       	rcall	.-230    	; 0x432 <GPIO_WritePinValue>
	return (ret);
}

STD_ReturnType GPIO_InitPin(pin_config_t *_pin_config)
{
	STD_ReturnType ret = E_OK;
 518:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(_pin_config->direction) {
			case INPUT:
				CLEAR_BIT(*ddr_registers[_pin_config->port], _pin_config->pin);
				GPIO_WritePinValue(_pin_config, _pin_config->logic);
			break;
 51a:	08 95       	ret
			case OUTPUT:
				SET_BIT(*ddr_registers[_pin_config->port], _pin_config->pin);
 51c:	a0 81       	ld	r26, Z
 51e:	a3 70       	andi	r26, 0x03	; 3
 520:	b0 e0       	ldi	r27, 0x00	; 0
 522:	aa 0f       	add	r26, r26
 524:	bb 1f       	adc	r27, r27
 526:	a7 5f       	subi	r26, 0xF7	; 247
 528:	be 4f       	sbci	r27, 0xFE	; 254
 52a:	0d 90       	ld	r0, X+
 52c:	bc 91       	ld	r27, X
 52e:	a0 2d       	mov	r26, r0
 530:	4c 91       	ld	r20, X
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	b9 01       	movw	r22, r18
 538:	02 c0       	rjmp	.+4      	; 0x53e <GPIO_InitPin+0x8a>
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	9a 95       	dec	r25
 540:	e2 f7       	brpl	.-8      	; 0x53a <GPIO_InitPin+0x86>
 542:	cb 01       	movw	r24, r22
 544:	84 2b       	or	r24, r20
 546:	8c 93       	st	X, r24
				GPIO_WritePinValue(_pin_config, _pin_config->logic);
 548:	60 81       	ld	r22, Z
 54a:	65 fb       	bst	r22, 5
 54c:	66 27       	eor	r22, r22
 54e:	60 f9       	bld	r22, 0
 550:	cf 01       	movw	r24, r30
 552:	6f df       	rcall	.-290    	; 0x432 <GPIO_WritePinValue>
	return (ret);
}

STD_ReturnType GPIO_InitPin(pin_config_t *_pin_config)
{
	STD_ReturnType ret = E_OK;
 554:	80 e0       	ldi	r24, 0x00	; 0
				GPIO_WritePinValue(_pin_config, _pin_config->logic);
			break;
			case OUTPUT:
				SET_BIT(*ddr_registers[_pin_config->port], _pin_config->pin);
				GPIO_WritePinValue(_pin_config, _pin_config->logic);
				break;
 556:	08 95       	ret
			case INPUT_PLUP:
				CLEAR_BIT(*ddr_registers[_pin_config->port], _pin_config->pin);
 558:	a0 81       	ld	r26, Z
 55a:	a3 70       	andi	r26, 0x03	; 3
 55c:	b0 e0       	ldi	r27, 0x00	; 0
 55e:	aa 0f       	add	r26, r26
 560:	bb 1f       	adc	r27, r27
 562:	a7 5f       	subi	r26, 0xF7	; 247
 564:	be 4f       	sbci	r27, 0xFE	; 254
 566:	0d 90       	ld	r0, X+
 568:	bc 91       	ld	r27, X
 56a:	a0 2d       	mov	r26, r0
 56c:	4c 91       	ld	r20, X
 56e:	21 e0       	ldi	r18, 0x01	; 1
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	b9 01       	movw	r22, r18
 574:	02 c0       	rjmp	.+4      	; 0x57a <GPIO_InitPin+0xc6>
 576:	66 0f       	add	r22, r22
 578:	77 1f       	adc	r23, r23
 57a:	9a 95       	dec	r25
 57c:	e2 f7       	brpl	.-8      	; 0x576 <GPIO_InitPin+0xc2>
 57e:	cb 01       	movw	r24, r22
 580:	80 95       	com	r24
 582:	84 23       	and	r24, r20
 584:	8c 93       	st	X, r24
				GPIO_WritePinValue(_pin_config, HIGH);
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	cf 01       	movw	r24, r30
 58a:	53 df       	rcall	.-346    	; 0x432 <GPIO_WritePinValue>
	return (ret);
}

STD_ReturnType GPIO_InitPin(pin_config_t *_pin_config)
{
	STD_ReturnType ret = E_OK;
 58c:	80 e0       	ldi	r24, 0x00	; 0
				GPIO_WritePinValue(_pin_config, _pin_config->logic);
				break;
			case INPUT_PLUP:
				CLEAR_BIT(*ddr_registers[_pin_config->port], _pin_config->pin);
				GPIO_WritePinValue(_pin_config, HIGH);
				break;
 58e:	08 95       	ret
{
	STD_ReturnType ret = E_OK;
		
	if (_pin_config == NULL || _pin_config->pin > MAX_PIN_NUMBER)
	{
		ret = E_NOT_OK;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	08 95       	ret
			case INPUT_PLUP:
				CLEAR_BIT(*ddr_registers[_pin_config->port], _pin_config->pin);
				GPIO_WritePinValue(_pin_config, HIGH);
				break;
			default:
				ret = E_NOT_OK;
 594:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return (ret);
}
 596:	08 95       	ret

00000598 <__tablejump2__>:
 598:	ee 0f       	add	r30, r30
 59a:	ff 1f       	adc	r31, r31
 59c:	05 90       	lpm	r0, Z+
 59e:	f4 91       	lpm	r31, Z
 5a0:	e0 2d       	mov	r30, r0
 5a2:	09 94       	ijmp

000005a4 <_exit>:
 5a4:	f8 94       	cli

000005a6 <__stop_program>:
 5a6:	ff cf       	rjmp	.-2      	; 0x5a6 <__stop_program>
